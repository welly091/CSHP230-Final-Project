<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radical</name>
    </assembly>
    <members>
        <member name="T:Topics.Radical.Analytics.AnalyticsEvent">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Topics.Radical.Analytics.AnalyticsEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Analytics.AnalyticsEvent"/> class.
            </summary>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.AdvisedAction">
            <summary>
            Represents a suggested action produced by
            the provisioning system of a change tracking service.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction">
            <summary>
            Represents a suggested action produced by
            the provisioning system of a change tracking service.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction.Action">
            <summary>
            Gets the suggested action for the target object incapsulated by this instance.
            </summary>
            <value>The suggested action.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction.Target">
            <summary>
            Gets the target object of the suggested action.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AdvisedAction.#ctor(System.Object,Topics.Radical.ComponentModel.ChangeTracking.ProposedActions)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.AdvisedAction"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.AdvisedAction.Action">
            <summary>
            Gets the suggested action for the target object incapsulated by this instance.
            </summary>
            <value>The suggested action.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.AdvisedAction.Target">
            <summary>
            Gets the target object of the suggested action.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Advisory">
            <summary>
            An advisory is a read-only list of <c>IAdvisedAction</c>(s) that describes
            the action that the change tracking provisioning engine suggest that should
            be executed in order to persist the occurred changes.
            </summary>
        </member>
        <member name="T:Topics.Radical.Collections.ReadOnlyCollection`1">
            <summary>
            A read-only collection of items.
            </summary>
            <typeparam name="T">The type of the collection item.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IReadOnlyCollection`1">
            <summary>
            A read-only collection of items.
            </summary>
            <typeparam name="T">The type of the collection item.</typeparam>
        </member>
        <member name="M:Topics.Radical.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Collections.ReadOnlyCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Collections.ReadOnlyCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Topics.Radical.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Topics.Radical.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Collections.ReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Topics.Radical.Collections.ReadOnlyCollection`1.InnerList">
            <summary>
            Gets the inner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:Topics.Radical.Collections.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Topics.Radical.Collections.ReadOnlyCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Topics.Radical.Collections.ReadOnlyCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisory">
            <summary>
            An advisory is a read-only list of <c>IAdvisedAction</c>(s) that describes
            the action that the change tracking provisioning engine suggest that should
            be executed in order to persist the occurred changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Advisory.#ctor(System.Collections.Generic.IEnumerable{Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Advisory"/> class.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.AdvisoryBuilder">
            <summary>
            Offers a default implementation of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder"/> interface.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder">
            <summary>
            <c>IAdvisoryBuilder</c> interface is used by the change tracking service
            in order to allow callers to customize the advisory build process.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder.GenerateAdvisory(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.IChangeSet)">
            <summary>
            Generates the advisory.
            </summary>
            <param name="svc">The service that holds the data to generate the advisory for.</param>
            <param name="changeSet">The subset of changes to generate the advisory for.</param>
            <returns>The generated advisory.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AdvisoryBuilder.#ctor(Topics.Radical.ComponentModel.ChangeTracking.IChangeSetDistinctVisitor)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.AdvisoryBuilder"/> class.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AdvisoryBuilder.GenerateAdvisory(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.IChangeSet)">
            <summary>
            Generates the advisory.
            </summary>
            <param name="svc">The service that holds the data to generate the advisory for.</param>
            <param name="changeSet">The subset of changes to generate the advisory for.</param>
            <returns>The generated advisory.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AdvisoryBuilder.OnCreateAdvisedAction(System.Object,Topics.Radical.ComponentModel.ChangeTracking.ProposedActions)">
            <summary>
            Called in order to create the advised action for the give target.
            </summary>
            <param name="target">The target entity.</param>
            <param name="proposedAction">The proposed action.</param>
            <returns>The advised action.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeSetDistinctVisitor">
            <summary>
            A class that implements <c>IChangeSetDistinctVisitor</c> is requested to analyze the
            supplied change set and return a list (a distinct list) of changed entities with the most
            significant change occurred to the entity. An <c>IChangeSetDistinctVisitor</c> is required
            in order to implement a custom advisory provisioning angine.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeSetDistinctVisitor.Visit(Topics.Radical.ComponentModel.ChangeTracking.IChangeSet)">
            <summary>
            Visits the specified change set.
            </summary>
            <param name="changeSet">The change set to visit.</param>
            <returns>A distinct dictionary containing a reference to all the changed entities and the most important change.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChange">
            <summary>
            Represents a change occurred to an object.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChange.GetChangedEntities">
            <summary>
            Gets the changed entities holded by this IChange instance.
            </summary>
            <returns>A list of changed entities.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChange.Commit(Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Commits this change.
            </summary>
            <param name="reason">The reason of the commit.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChange.Reject(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Rejects this change.
            </summary>
            <param name="reason">The reason of the reject.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChange.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChange.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChange.Owner">
            <summary>
            Gets the owner of this change, tipically the changed object.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="E:Topics.Radical.ComponentModel.ChangeTracking.IChange.Committed">
            <summary>
            Occurs when this IChange has been committed.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.ChangeTracking.IChange.Rejected">
            <summary>
            Occurs when this IChange has been rejected.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChange.IsCommitSupported">
            <summary>
            Gets a value indicating whether this instance supports commit.
            </summary>
            <value>
            	<c>true</c> if this instance supports commit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChange.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.Add(Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior)">
            <summary>
            Adds the specified change.
            </summary>
            <param name="change">The change.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.RegisterTransient(System.Object,System.Boolean)">
            <summary>
            Registers the transient.
            </summary>
            <param name="entity">The entity.</param>
            <param name="autoRemove">if set to <c>true</c> [auto remove].</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.GetEntityState(System.Object)">
            <summary>
            Gets the state of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            A set of values from the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates"/> enumeration.
            </returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.GetChangedEntities">
            <summary>
            Gets the changed entities holded by this IChange instance.
            </summary>
            <returns>A list of changed entities.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.Commit(Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Commits this change.
            </summary>
            <param name="reason">The reason of the commit.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.Reject(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Rejects this change.
            </summary>
            <param name="reason">The reason of the reject.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.AtomicChange.MergeTransientEntities(System.Collections.Generic.IDictionary{System.Object,System.Boolean})">
            <summary>
            Merges the transient entities.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.AtomicChange.Owner">
            <summary>
            Gets the owner of this change, tipically the changed object.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.AtomicChange.Committed">
            <summary>
            Occurs when this IChange has been committed.
            </summary>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.AtomicChange.Rejected">
            <summary>
            Occurs when this IChange has been rejected.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.AtomicChange.IsCommitSupported">
            <summary>
            Gets a value indicating whether this instance supports commit.
            </summary>
            <value>
            	<c>true</c> if this instance supports commit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.AtomicChange.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IAtomicOperation">
            <summary>
            Represents an atomic operation within the lifecycle
            of an <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>. An atomic
            operation can group a set of changes as a single change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IAtomicOperation.Complete">
            <summary>
            Completes this atomic operation.
            </summary>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Bookmark">
            <summary>
            A bookmark is a placeholder to track a specific position in
            the change tracking history of a change tracking service.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IBookmark">
            <summary>
            A bookmark is a placeholder to track a specific position in
            the change tracking history of a change tracking service.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IBookmark.Position">
            <summary>
            Gets the position this bookmark has
            been created to.
            </summary>
            <value>The position of the bookmark.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IBookmark.Owner">
            <summary>
            Gets the change tracking service that created 
            the bookmark.
            </summary>
            <value>The owner service.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IBookmark.TransientEntities">
            <summary>
            Gets the list of entities that were transient before the creation
            of the bookmark.
            </summary>
            <value>The transient entities.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Bookmark.#ctor(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.IChange,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Bookmark"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="position">The position.</param>
            <param name="transientEntities">The transient entities.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Bookmark.Position">
            <summary>
            Gets the position this bookmark has
            been created to.
            </summary>
            <value>The position of the bookmark.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Bookmark.Owner">
            <summary>
            Gets the change tracking service that created
            the bookmark.
            </summary>
            <value>The owner service.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Bookmark.TransientEntities">
            <summary>
            Gets the transient entities.
            </summary>
            <value>The transient entities.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Change`1">
            <summary>
            Represents a change occurred to an object.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChange`1">
            <summary>
            Represents a change occurred to an object.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChange`1.CachedValue">
            <summary>
            Gets the cached value.
            </summary>
            <value>The cached value.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.#ctor(System.Object,`0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{`0},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Change`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="valueToCache">The value to cache.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.Commit(Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Commits this change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.OnCommit(Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Called in order to commit this change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.OnCommitted(Topics.Radical.ComponentModel.ChangeTracking.CommittedEventArgs)">
            <summary>
            Called when Committed event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.Reject(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Rejects this change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.OnReject(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Called in order to reject this change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.OnRejected(Topics.Radical.ComponentModel.ChangeTracking.RejectedEventArgs)">
            <summary>
            Raises the Rejected event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Change`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.RejectCallback">
            <summary>
            The callback to invoke in order to 
            reject the cached value.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.CommitCallback">
            <summary>
            The callback to invoke in order to
            commit the cached value.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.Owner">
            <summary>
            Gets the owner of this change.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.Change`1.Committed">
            <summary>
            Occurs when this IChange has been committed.
            </summary>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.Change`1.Rejected">
            <summary>
            Occurs when this IChange has been rejected.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.IsCommitSupported">
            <summary>
            Gets a value indicating whether this instance supports commit.
            </summary>
            <value>
            	<c>true</c> if this instance supports commit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Change`1.CachedValue">
            <summary>
            Gets the cached value.
            </summary>
            <value>The cached value.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.ChangeSet">
            <summary>
            A change set is a readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/> instance.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeSet">
            <summary>
            A change set is a readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/> instances.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeSet.#ctor(System.Collections.Generic.IEnumerable{Topics.Radical.ComponentModel.ChangeTracking.IChange})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.ChangeSet"/> class.
            </summary>
            <param name="changes">The changes.</param>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.IncludeAllChangeSetFilter">
            <summary>
            A base implamentation of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeSetFilter"/> interface that
            always evaluates to true.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeSetFilter">
            <summary>
            An instance of an <c>IChangeSetFilter</c> is a class 
            used to filter <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/>(s) that has to be
            included in an <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeSet"/>.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeSetFilter.ShouldInclude(Topics.Radical.ComponentModel.ChangeTracking.IChange)">
            <summary>
            Determines if the supplied IChange should be
            included in the builded IChangeSet.
            </summary>
            <param name="change">The change to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.IncludeAllChangeSetFilter.ShouldInclude(Topics.Radical.ComponentModel.ChangeTracking.IChange)">
            <summary>
            Determines if the supplied IChange should be
            included in the builded IChangeSet.
            </summary>
            <param name="change">The change to evaluate.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.IncludeAllChangeSetFilter.Instance">
            <summary>
            Gets the filter instance.
            </summary>
            <value>The filter instance.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.ChangeTrackingService">
            <summary>
            Provides a default implementation of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>
            interface in order to provide change tracking functionalities.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService">
            <summary>
            Provides change tracking functionalities.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.CreateBookmark">
            <summary>
            Creates a bookmark usefull to save a position
            in this IChangeTrackingService.
            </summary>
            <remarks>
            A bookmark is always created also if there are no changes currently registered by
            the change tracking service, in this case reverting to the created bookmark equals
            to perform a full change reject.
            </remarks>
            <returns>An <c>IBookmark</c> instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Revert(Topics.Radical.ComponentModel.ChangeTracking.IBookmark)">
            <summary>
            Reverts the status of this IChangeTrackingService
            to the specified bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified 
            bookmark has not been created by this service.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Validate(Topics.Radical.ComponentModel.ChangeTracking.IBookmark)">
            <summary>
            Validates the specified bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <returns><c>True</c> if the given bookmark is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.RegisterTransient(System.Object)">
            <summary>
            Registers the supplied object as a new object.
            </summary>
            <param name="entity">The object to track as transient.</param>
            <exception cref="T:System.ArgumentException">If thew change tracking service has already registered the object or if hhas pending changes for the object an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.RegisterTransient(System.Object,System.Boolean)">
            <summary>
            Registers the supplied entity as a new object.
            </summary>
            <param name="entity">The object to track as transient.</param>
            <param name="autoRemove">if set to <c>true</c> the object is automatically removed from the list 
            of registered objects in case of Undo and RejectChanges.</param>
            <remarks>if <c>autoRemove</c> is set to true (the default value) and RejectChanges, 
            or an Undo that removes the last IChange of the object, is called the object then is automatically 
            removed from the list of the new objects.</remarks>
            <exception cref="T:System.ArgumentException">If the change tracking service has already registered the object or if has pending changes for the object an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.UnregisterTransient(System.Object)">
            <summary>
            Unregisters the supplied entity from the transient objects 
            marking it as a NonTransient entity.
            </summary>
            <param name="entity">The entity to unregister.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the supplied entity is not in <c>IsTransient</c> state an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetEntityState(System.Object)">
            <summary>
            Gets the state of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>A set of values from the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates"/> enumeration.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetEntities">
            <summary>
            Gets all the entities tracked by this service instance.
            </summary>
            <returns>A enumerable list of tracked entities.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetEntities(Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates,System.Boolean)">
            <summary>
            Gets a list of entities based on a filter.
            </summary>
            <param name="sateFilter">The sate filter to use to search entities.</param>
            <param name="exactMatch">if set to <c>true</c> the search is performed using an exact match behavior.</param>
            <returns>An enumerable list of entities that matches the filter.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Undo">
            <summary>
            Undoes the last IChange holded by 
            this instance and removes it from
            the cache.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Redo">
            <summary>
            Redoes the last undoed change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetChangeSet">
            <summary>
            Gets all the changes currently holded by
            this IChangeTrackingService
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetChangeSet(Topics.Radical.ComponentModel.ChangeTracking.IChangeSetFilter)">
            <summary>
            Gets all the changes currently holded by
            this IChangeTrackingService filtered by the
            supplied IChangeSetBuilder.
            </summary>
            <param name="builder">The IChangeSetBuilder.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Add(Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior)">
            <summary>
            Adds a new change definition to this IChangeTrackingService.
            </summary>
            <param name="change">The change to store.</param>
            <param name="behavior">The requested behavior.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetAdvisory">
            <summary>
            Generates an advisory that contains all the operations that
            an ipothetical UnitOfWork must perform in order to persist
            all the changes tracked by this ChangeTrackingService.
            </summary>
            <returns>A readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction"/>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.GetAdvisory(Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder)">
            <summary>
            Generates an advisory that contains all the operations that
            an ipothetical UnitOfWork must perform in order to persist
            all the changes tracked by this ChangeTrackingService.
            The generation is customized using the supplied <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder"/>.
            </summary>
            <param name="builder">An instance of a class implementing this <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder"/> 
            interface used to control the advisory generation process.</param>
            <returns>A readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction"/>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Suspend">
            <summary>
            Suspends all the tracking operation of this service.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Resume">
            <summary>
            Resumes all the tracking operation of this service.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Detach(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Stops tracking the supplied entities removing any changes linked to the entity 
            and removing it, if necessary, from the transient entities.
            </summary>
            <param name="entity">The entity to stop tracking.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.Attach(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Attaches the specified item.
            </summary>
            <param name="item">The item to attach.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.BeginAtomicOperation">
            <summary>
            Begins a new atomic operation. An atomic operation is usefull to
            treat a set of subsequent changes as a single change.
            </summary>
            <exception cref="T:System.ArgumentException">An <c>ArgumentException</c> is raised if there
            is another active atomic operation.</exception>
            <returns>The newly created atomic operation.</returns>
        </member>
        <member name="E:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.TrackingServiceStateChanged">
            <summary>
            Occurs when the internal state of the tracking service changes.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.ChangesAccepted">
            <summary>
            Occurs when are changes accepted.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.ChangesRejected">
            <summary>
            Occurs when changes are rejected.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.HasTransientEntities">
            <summary>
            Gets a value indicating whether this instance has transient entities.
            </summary>
            <value>
            	<c>true</c> if this instance has transient entities; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo the last change.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService.IsSuspended">
            <summary>
            Gets a value indicating whether this instance is suspended.
            </summary>
            <value>
            	<c>true</c> if this instance is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Topics.Radical.ChangeTracking.ChangeTrackingService.SyncRoot">
            <summary>
            The shared synch lock
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.ChangeTracking.ChangeTrackingService"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnTrackingServiceStateChanged">
            <summary>
            Raises the <c>TrackingServiceStateChanged</c> event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnRejectingChanges(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <c>ChangesRejected</c> event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnChangesRejected">
            <summary>
            Raises the <c>ChangesRejected</c> event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnChangesAccepted">
            <summary>
            Raises the <c>ChangesRejected</c> event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.ChangeTrackingService"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.CreateBookmark">
            <summary>
            Creates a bookmark usefull to save a position
            in this IChangeTrackingService.
            </summary>
            <returns>An <c>IBookmark</c> instance.</returns>
            <remarks>
            A bookmark is always created also if there are no changes currently registered by
            the change tracking service, in this case reverting to the created bookmark equals
            to perform a full change reject.
            </remarks>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Revert(Topics.Radical.ComponentModel.ChangeTracking.IBookmark)">
            <summary>
            Reverts the status of this IChangeTrackingService
            to the specified bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified
            bookmark has not been created by this service.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnRevert(Topics.Radical.ComponentModel.ChangeTracking.IBookmark)">
            <summary>
            Called in order to reverts the status of this <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>
            to the specified bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Validate(Topics.Radical.ComponentModel.ChangeTracking.IBookmark)">
            <summary>
            Validates the specified bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <returns><c>True</c> if the given bookmark is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.RegisterTransient(System.Object)">
            <summary>
            Registers the supplied object as a new object.
            </summary>
            <param name="entity">The object to track as transient.</param>
            <exception cref="T:System.ArgumentException">If the change tracking service has already registered the object or if hhas pending changes for the object an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.RegisterTransient(System.Object,System.Boolean)">
            <summary>
            Registers the supplied object as a new object.
            </summary>
            <param name="entity">The object to track as transient.</param>
            <param name="autoRemove">
            if set to <c>true</c> the object is automatically removed from the list of registered objects in 
            case of Undo and RejectChanges.
            </param>
            <remarks>
            if <c>autoRemove</c> is set to true (the default value) and RejectChnages, or an Undo that removes 
            the last IChange of the object, is called the object then is automatically removed from the list of 
            the new objects. An object marked as auto remove is not included in any advisory if it has no pending 
            changes.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the change tracking service has already registered the object or if has pending 
            changes for the object an ArgumentException is raised.
            </exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnRegisterTransient(System.Object,System.Boolean)">
            <summary>
            Registers the supplied object as a new object.
            </summary>
            <param name="entity">The object to track as transient.</param>
            <param name="autoRemove">
            if set to <c>true</c> the object is automatically removed from the list of registered objects in 
            case of Undo and RejectChanges.
            </param>
            <remarks>
            if <c>autoRemove</c> is set to true (the default value) and RejectChnages, or an Undo that removes 
            the last IChange of the object, is called the object then is automatically removed from the list of 
            the new objects.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the change tracking service has already registered the object or if has pending 
            changes for the object an ArgumentException is raised.
            </exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.UnregisterTransient(System.Object)">
            <summary>
            Unregisters the supplied entity from the transient objects
            marking it as a NonTransient entity.
            </summary>
            <param name="entity">The entity to unregister.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the supplied entity is not in <c>IsTransient</c> state an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnUnregisterTransient(System.Object)">
            <summary>
            Unregisters the supplied entity from the transient objects
            marking it as a NonTransient entity.
            </summary>
            <param name="entity">The entity to unregister.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the supplied entity is not in <c>IsTransient</c> state an ArgumentException is raised.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetEntities">
            <summary>
            Gets all the entities tracked by this service instance.
            </summary>
            <returns>A enumerable list of tracked entities.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetEntities(Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates,System.Boolean)">
            <summary>
            Gets the entities.
            </summary>
            <param name="stateFilter">The state filter.</param>
            <param name="exactMatch">if set to <c>true</c> [exact match].</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetEntityState(System.Object)">
            <summary>
            Gets the state of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            A set of values from the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates"/> enumeration.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnUndo(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)" -->
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnRedo(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Called in order to perform the redo operation.
            </summary>
            <param name="reason">The reason of the redo request.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Undo">
            <summary>
            Undoes the last IChange holded by
            this instance and removes it from
            the cache.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Redo">
            <summary>
            Redoes the last undoed change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetChangeSet">
            <summary>
            Gets all the changes currently holded by
            this IChangeTrackingService
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetChangeSet(Topics.Radical.ComponentModel.ChangeTracking.IChangeSetFilter)">
            <summary>
            Gets all the changes currently holded by
            this IChangeTrackingService filtered by the
            supplied IChangeSetFilter.
            </summary>
            <param name="filter">The IChangeSetFilter.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Add(Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior)">
            <summary>
            Adds a new change definition to this IChangeTrackingService.
            </summary>
            <param name="change">The change to store.</param>
            <param name="behavior">The requested behavior.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetAdvisory">
            <summary>
            Generates an advisory that contains all the operations that
            an ipothetical UnitOfWork must perform in order to persist
            all the changes tracked by this ChangeTrackingService.
            </summary>
            <returns>
            A readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.GetAdvisory(Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder)">
            <summary>
            Generates an advisory that contains all the operations that
            an ipothetical UnitOfWork must perform in order to persist
            all the changes tracked by this ChangeTrackingService.
            The generation is customized using the supplied <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder"/>.
            </summary>
            <param name="builder">An instance of a class implementing this <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisoryBuilder"/>
            interface used to control the advisory generation process.</param>
            <returns>
            A readonly list of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IAdvisedAction"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnWire(Topics.Radical.ComponentModel.ChangeTracking.IChange)">
            <summary>
            Called when the change tracking service needs to add handlers to the <c>IChange</c> supplied as parameter.
            </summary>
            <param name="change">The change to wire to.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnWire(System.ComponentModel.IComponent)">
            <summary>
            Called when the change tracking service needs to add handlers to the <c>IComponent</c> supplied as parameter.
            </summary>
            <param name="entity">The entity to wire to.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnUnwire(Topics.Radical.ComponentModel.ChangeTracking.IChange)">
            <summary>
            Called when the change tracking service needs to remove handlers from the <c>IChange</c> supplied as parameter.
            </summary>
            <param name="change">The change to unwire from.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnChangeCommitted(Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Called when change(s) have been committed from the <c>IChange</c> instance.
            </summary>
            <param name="change">The committed change.</param>
            <param name="reason">The reason of the commit.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnChangeRejected(Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Handles the change rejected event.
            </summary>
            <param name="change">The change that raises the rejected event.</param>
            <param name="reason">The reason of the event raise.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnDetach(Topics.Radical.ComponentModel.ChangeTracking.IMemento,Topics.Radical.ChangeTracking.ChangeTrackingService.StopTrackingReason)">
            <summary>
            Stops tracking the supplied entities removing any changes linked to the entity
            and removing it, if necessary, from the transient entities.
            </summary>
            <param name="entity">The entity to stop tracking.</param>
            <param name="reason">The reason why OnStopTracking has been called.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.EnsureNotSuspended">
            <summary>
            Ensures the this service instance is not suspended.
            </summary>
            <exception cref="T:Topics.Radical.SuspendedChangeTrackingServiceException">A 
            <c>SuspendedChangeTrackingServiceException</c> is raised if thsi instance is in a suspended state.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Suspend">
            <summary>
            Suspends all the tracking operation of this service.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Resume">
            <summary>
            Resumes all the tracking operation of this service.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Detach(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Stops tracking the supplied entities removing any changes linked to the entity
            and removing it, if necessary, from the transient entities.
            </summary>
            <param name="entity">The entity to stop tracking.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.Attach(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Attaches the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnAttach(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Called in order to attach the supplied entity to this tracking service.
            </summary>
            <param name="item">The item to attach.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.RejectChanges">
            <summary>
            Resets the object’s state to unchanged by rejecting the modifications.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.AcceptChanges">
            <summary>
            Resets the object’s state to unchanged by accepting the modifications.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.OnDisposed">
            <summary>
            Raises the Disposed event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingService.BeginAtomicOperation">
            <summary>
            Begins a new atomic operation. An atomic operation is usefull to
            treat a set of subsequent changes as a single change.
            </summary>
            <returns>The newly created atomic operation.</returns>
            <exception cref="T:System.ArgumentException">An <c>ArgumentException</c> is raised if there
            is another active atomic operation.</exception>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.ChangeTrackingService.TrackingServiceStateChanged">
            <summary>
            Occurs when the internal state of the tracking service changes.
            </summary>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.ChangeTrackingService.RejectingChanges">
            <summary>
            Occurs when changes are rejected.
            </summary>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.ChangeTrackingService.ChangesRejected">
            <summary>
            Occurs when changes are rejected.
            </summary>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.ChangeTrackingService.ChangesAccepted">
            <summary>
            Occurs when are changes accepted.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo the last change.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.HasTransientEntities">
            <summary>
            Gets a value indicating whether this instance has transient entities.
            </summary>
            <value>
            	<c>true</c> if this instance has transient entities; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.IsSuspended">
            <summary>
            Gets a value indicating whether this instance is suspended.
            </summary>
            <value>
            	<c>true</c> if this instance is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.IsChanged">
            <summary>
            Gets the object's changed status.
            </summary>
            <value></value>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges"/>; otherwise, false.</returns>
        </member>
        <member name="E:Topics.Radical.ChangeTracking.ChangeTrackingService.Disposed">
            <summary>
            Event raised when the Dispose of this instance has completed.
            </summary>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"/> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.ChangeTrackingService.Events">
            <summary>
            Gets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.ChangeTrackingService.StopTrackingReason">
            <summary>
            Provides information about the reason why 
            the stopTracking method has been called
            </summary>
        </member>
        <member name="F:Topics.Radical.ChangeTracking.ChangeTrackingService.StopTrackingReason.UserRequest">
            <summary>
            The StopTracking request is due to an outside request, a user request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ChangeTracking.ChangeTrackingService.StopTrackingReason.DisposedEvent">
            <summary>
            The StopTracking request is due to the handling of the entity disposed event.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior">
            <summary>
            Tha AddChangeBehavior enumeration describes the reason
            of the change add request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior.None">
            <summary>
            None is a default not supported value.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior.Default">
            <summary>
            The change comes from the external environment, 
            eg. is pushed because of user action.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior.RedoRequest">
            <summary>
            The change is due to a Redo request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior.UndoRequest">
            <summary>
            The change is due to an Undo request.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions">
            <summary>
            A ProposedActions is a proposal by the change tracking provisioning system.
            This action is an ipothetical action that can be performed by an unit of work.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions.None">
            <summary>
            The provisioning system cannot determine 
            the best action for the given object.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions.Create">
            <summary>
            The data for this object should be created because
            the object is marked as new
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions.Update">
            <summary>
            The object is changed and the storage should be updated
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions.Delete">
            <summary>
            The object has been deleted and should be 
            deleted from the storage too.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ProposedActions.Dispose">
            <summary>
            The object has been deleted but being marked
            as new is a nonsense to remove itr from the
            underlying storage, simply dispose its instance
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeCommittedEventArgs`1">
            <summary>
            ChangeCommittedArgs describes the change commit request and transport
            data containg detailed infos about the committed change.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1">
            <summary>
            ChangeArgs is the base class for data describing a change commit
            or a change reject, transport data containg detailed infos about 
            the rejected change.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1.#ctor(System.Object,`0,Topics.Radical.ComponentModel.ChangeTracking.IChange)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="cachedValue">The cached value.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1.Entity">
            <summary>
            Gets the changed entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1.CachedValue">
            <summary>
            Gets the cached value.
            </summary>
            <value>The cached value.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.ChangeEventArgs`1.Source">
            <summary>
            Gets the source change on witch the reject or 
            commit has been requested.
            </summary>
            <value>The source change.</value>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.ChangeCommittedEventArgs`1.#ctor(System.Object,`0,Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeCommittedEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="cachedValue">The cached value.</param>
            <param name="source">The source.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.ChangeCommittedEventArgs`1.Reason">
            <summary>
            Gets the reason of the commit request.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeRejectedEventArgs`1">
            <summary>
            ChangeRejectedArgs describes the change reject request and transport
            data containg detailed information about the rejected change.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.ChangeRejectedEventArgs`1.#ctor(System.Object,`0,Topics.Radical.ComponentModel.ChangeTracking.IChange,Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeRejectedEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="cachedValue">The cached value.</param>
            <param name="source">The source.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.ChangeRejectedEventArgs`1.Reason">
            <summary>
            Gets the reason of the reject request.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.RejectReason">
            <summary>
            Reports the reason of a change reject.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.RejectReason.None">
            <summary>
            None is a default not supported value. The usage of null 
            should raise an <see cref="!:ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.RejectReason.Undo">
            <summary>
            The reject is due to an Undo request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.RejectReason.Redo">
            <summary>
            The reject is due to a Redo request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.RejectReason.RejectChanges">
            <summary>
            The reject is due to a reject changes request.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.RejectReason.Revert">
            <summary>
            The reject is due to a revert to bookmark request.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.CommitReason">
            <summary>
            Reports the reason of a change commmit.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.CommitReason.None">
            <summary>
            None is a default not supported value. The usage of null 
            should raise an <see cref="!:ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.CommitReason.AcceptChanges">
            <summary>
            The commit is due to an accept change request.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.CommittedEventArgs">
            <summary>
            Contains event data describing the change commit.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.CommittedEventArgs.#ctor(Topics.Radical.ComponentModel.ChangeTracking.CommitReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.CommittedEventArgs"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.CommittedEventArgs.Reason">
            <summary>
            Gets the reason of the commit request.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.RejectCallback`1">
            <summary>
            A pointer to a function to call in order to reject the value of a change.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.CommitCallback`1">
            <summary>
            A pointer to a function to call in order to commit the value of a change.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.RejectedEventArgs">
            <summary>
            Contains event data describing the change reject.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ChangeTracking.RejectedEventArgs.#ctor(Topics.Radical.ComponentModel.ChangeTracking.RejectReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.RejectedEventArgs"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.RejectedEventArgs.Reason">
            <summary>
            Gets the reason of the reject request.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates">
            <summary>
            Determines the tracking state of an object.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates.None">
            <summary>
            The state of the entity is not changed, 
            the entity is not transient or the entity
            is not tracked.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates.IsTransient">
            <summary>
            The entity is transient.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates.AutoRemove">
            <summary>
            if an entity is marked as <c>AutoRemove</c> (the default behavior) and RejectChanges,
            or an Undo that removes the last IChange of the entity, is called then the entity is 
            automatically removed from the list of the transient entities.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates.HasBackwardChanges">
            <summary>
            The entity is changed and has changes that can be undone.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.EntityTrackingStates.HasForwardChanges">
            <summary>
            The entity has changes that can be reapplied.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IMemento">
            <summary>
            The <c>IMemento</c> interface defines that an entity explicitly
            requires a memento service.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IMemento.Memento">
            <summary>
            Gets or sets the change tracking service to use as memento
            features provider.
            </summary>
            <value>The change tracking service.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration">
            <summary>
            Determines how to register the entity with the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration.AsTransient">
            <summary>
            The entity will be registered as transient.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration.AsPersistent">
            <summary>
            The entity will be registered as persistent.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.TransientRegistration">
            <summary>
            Determines the type oo the transient registration.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ChangeTracking.TransientRegistration.AsTransparent">
            <summary>
            The transient entity will be registered in the change tracking service
            as a transaprent entity, this means that if the transient entity has no
            changes it will not be considered as changed but will be ignored.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Topics.Radical.ComponentModel.ChangeTracking.TransientRegistration.AsPersistable" -->
        <member name="T:Topics.Radical.ComponentModel.ChangeTracking.IPropertyValueChange">
            <summary>
            Identifies a change occurred to a property.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ChangeTracking.IPropertyValueChange.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ComponentRegisteredEventArgs">
            <summary>
            Defines event args for the ComponentRegistered event.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ComponentRegisteredEventArgs.#ctor(Topics.Radical.ComponentModel.IContainerEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ComponentRegisteredEventArgs"/> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ComponentRegisteredEventArgs.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IBootable">
            <summary>
            Identifies a component the can be booted.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IBootable.Boot">
            <summary>
            Boots this instance.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IContainerEntry">
            <summary>
            Defines a container entry.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.Component">
            <summary>
            Gets the component type.
            </summary>
            <value>The component type.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.Service">
            <summary>
            Gets the service type.
            </summary>
            <value>The service type.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.Factory">
            <summary>
            Gets the factory used to build up a concrete type.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.Lifestyle">
            <summary>
            Gets the lifestyle of this component.
            </summary>
            <value>The lifestyle.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IContainerEntry.IsOverridable">
            <summary>
            Gets an indication is this component is overridable.
            </summary>
            <value>
            An indication is this component is overridable.
            </value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IPuzzleContainer">
            <summary>
            Defines the contract of the Puzzle Inversion of Control container.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.AddFacility(Topics.Radical.ComponentModel.IPuzzleContainerFacility)">
            <summary>
            Adds the given facility instance to this container.
            </summary>
            <param name="facility">The facility.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.AddFacility``1">
            <summary>
            Adds a new facility.
            </summary>
            <typeparam name="TFacility">The type of the facility.</typeparam>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.Register(System.Collections.Generic.IEnumerable{Topics.Radical.ComponentModel.IContainerEntry})">
            <summary>
            Registers all the specified entries.
            </summary>
            <param name="entries">The entries to register.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.Register(Topics.Radical.ComponentModel.IContainerEntry)">
            <summary>
            Registers the specified entry in this container.
            </summary>
            <param name="entry">The entry to register.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.IsRegistered``1">
            <summary>
            Determines whether the given service type is registered.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
            	<c>true</c> if the given service type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.IsRegistered(System.Type)">
            <summary>
            Determines whether the given service type is registered.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>
            	<c>true</c> if the given service type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.Resolve(System.Type)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">The Type of the service.</param>
            <returns>The resolved service instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainer.Resolve``1">
            <summary>
            Resolves the specified service type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>The resolved service instance.</returns>
        </member>
        <member name="E:Topics.Radical.ComponentModel.IPuzzleContainer.ComponentRegistered">
            <summary>
            Occurs when a component is registered in this container.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1">
            <summary>
            Defines a container entry.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.UsingInstance``1(``0)">
            <summary>
            Sets the serviceinstance to use as resolve result.
            </summary>
            <param name="instance">The instance.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.ImplementedBy(System.Type)">
            <summary>
            Defines the type that implements the service.
            </summary>
            <param name="componentType">The type of the component.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.ImplementedBy``1">
            <summary>
            Defines the type that implements the service.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.WithLifestyle(Topics.Radical.ComponentModel.Lifestyle)">
            <summary>
            Defines the lifestyle of this entry.
            </summary>
            <param name="lifestyle">The lifestyle.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.UsingFactory(System.Func{`0})">
            <summary>
            Defines the factory to use.
            </summary>
            <param name="factory">The factory.</param>
            <returns>This entry instance</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry`1.Overridable">
            <summary>
            Defines the specified component registration as overridable.
            </summary>
            <returns>
            This entry instance.
            </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IPuzzleContainerEntry">
            <summary>
            Defines a container entry.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry.UsingInstance(System.Object)">
            <summary>
            Sets the serviceinstance to use as resolve result.
            </summary>
            <param name="instance">The instance.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry.ImplementedBy(System.Type)">
            <summary>
            Defines the type that implements the service.
            </summary>
            <param name="componentType">The type of the component.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry.WithLifestyle(Topics.Radical.ComponentModel.Lifestyle)">
            <summary>
            Defines the lifestyle of this entry.
            </summary>
            <param name="lifestyle">The lifestyle.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry.UsingFactory(System.Func{System.Object})">
            <summary>
            Defines the factory to use.
            </summary>
            <param name="factory">The factory.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerEntry.Overridable">
            <summary>
            Defines the specified component registration as overridable.
            </summary>
            <returns>
            This entry instance.
            </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IPuzzleContainerFacility">
            <summary>
            Defines a facility for the puzzle container.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerFacility.Initialize(Topics.Radical.ComponentModel.IPuzzleContainer)">
            <summary>
            Initializes this facility.
            </summary>
            <param name="container">The container hosting the facility.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IPuzzleContainerFacility.Teardown(Topics.Radical.ComponentModel.IPuzzleContainer)">
            <summary>
            Teardowns this facility.
            </summary>
            <param name="container">The container hosting the facility.</param>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Lifestyle">
            <summary>
            Defines the lifestyle of a component.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Lifestyle.Singleton">
            <summary>
            Singleton lifestyle.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Lifestyle.Transient">
            <summary>
            Transient lifestyle.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ContractAttribute">
            <summary>
            Represents a contract interface
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ContractAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ContractAttribute"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ContractAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ContractAttribute"/> class.
            </summary>
            <param name="contractInterface">The contract interface.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.ContractAttribute.ContractInterface">
            <summary>
            Gets the contract interface.
            </summary>
            <value>The contract interface.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Factories.IChangeTrackingServiceFactory">
            <summary>
            Provides a way to programmatically create
            <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> instances.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Factories.IChangeTrackingServiceFactory.Create">
            <summary>
            Creates a new <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> instance.
            </summary>
            <returns>The new <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Factories.IDataContextFactory">
            <summary>
            The main entry point for generic data access and 
            conversation management.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Factories.IDataContextFactory.Create">
            <summary>
            Creates a new data context, a data context identifies a conversation.
            </summary>
            <returns>The newly created data context.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IDataContext">
            <summary>
            An IDataContext represents an Unit of Work.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Insert(System.Object)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Update(System.Object)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Save(System.Object)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Delete(System.Object)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Clear">
            <summary>
            Clears this instance removing all the cached entities, cancelling all pending saves, updates and deletes.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.IsAttached(System.Object)">
            <summary>
            Determines whether the specified entity is attached.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is attached; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Detach(System.Object)">
            <summary>
            Detaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
            <returns>The begun transaction.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction with the specified isolation lavel.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>The begun transaction.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.FlushChanges">
            <summary>
            Flushes all the the pending changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.GetByQuery``2(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{``0,``1})">
            <summary>
            Gets a list of entity that satifies the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="querySpec">The query specification.</param>
            <returns>The list of entities that satifies the given query.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.GetScalar``2(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{``0,``1})">
            <summary>
            Gets a single value (a scalar value) that satisfies the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="scalarSpec">The scalar specification.</param>
            <returns>The scalar value that satisfies the given query.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.GetBySpecification``2(Topics.Radical.ComponentModel.QueryModel.ISpecification{``0,``1})">
            <summary>
            Gets a list of entity that satifies the given generic specification.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="specification">The generic specification.</param>
            <returns>The list of entities that satifies the given generic specification.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.GetByKey``1(System.Object)">
            <summary>
            Gets single entity given its key.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="key">The entity key.</param>
            <returns>The requested entity.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDataContext.Execute``1(``0)">
            <summary>
            Executes the specified command against the current data source using the underlying provider.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command to execute.</param>
            <returns>
            The number of affected entities.
            </returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IDataContext.HasPendingChanges">
            <summary>
            Gets a value indicating whether this instance has pending changes.
            </summary>
            <value>
            	<c>true</c> if this instance has pending changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IDataContext.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IDispatcher">
            <summary>
            Abstracts the concept of a multi-threading synchronization dispatcher.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Safely invokes the specified delegate.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="args">
            The delegate arguments, or null if 
            no arguments should be passed to the delegate.
            </param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDispatcher.Dispatch(System.Action)">
            <summary>
            Safely dispatches the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDispatcher.Dispatch``1(``0,System.Action{``0})">
            <summary>
            Safely dispatches the given argument to the supplied action.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="arg">The argument.</param>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDispatcher.Dispatch``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Safely dispatches the given arguments to the supplied action.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IDispatcher.Dispatch``1(System.Func{``0})">
            <summary>
            Safely dispatches the specified Func delegate.
            </summary>
            <typeparam name="TResult">The type of the Func result.</typeparam>
            <param name="func">The Func to dispatch.</param>
            <returns>The result of Func invocation.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IDispatcher.IsSafe">
            <summary>
            Gets a value indicating whether the caller can safely call a target method without using this dispatcher.
            </summary>
            <value><c>true</c> if the call is safe; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IKeyService">
            <summary>
            Key generation service, an implermentor of this interface
            is required to generate domain specific keys.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IKeyService.GenerateEmpty">
            <summary>
            Generates a new empty empty.
            </summary>
            <returns>The generated empty key.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IMonitor`1">
            <summary>
            Extends the basic IMonitor interface adding support to
            trace the monitored instance.
            </summary>
            <typeparam name="T">Ths monitored type.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IMonitor">
            <summary>
            IMonitor is the base contract to support Observer funtionalities,
            such as auto-triggering support exposed by the IDelegateCommand.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IMonitor.NotifyChanged">
            <summary>
            Asks this monitor to raise a change notification in order 
            to trigger all the listeners.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IMonitor.StopMonitoring">
            <summary>
            Stops all the monitoring operation.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.IMonitor.Changed">
            <summary>
            Occurs when the source monitored by this monitor changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IMonitor`1.Source">
            <summary>
            Gets the monitored source.
            </summary>
            <value>The monitored source.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ITransaction">
            <summary>
            A generic transaction abstraction layer.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ITransaction.Commit">
            <summary>
            Commits the pending transaction.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ITransaction.Rollback">
            <summary>
            Rollbacks the pending transaction.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IUniqueEntity`1">
            <summary>
            A domain entity that can be identified by a primary key.
            </summary>
            <typeparam name="T">Ths System.Type of the primary key data.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IUniqueEntity">
            <summary>
            A domain entity that can be identified by a primary key.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IUniqueEntity.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IUniqueEntity`1.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IKey">
            <summary>
            Represents an abstraction of a primary key.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IKey.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IKey`1">
            <summary>
            Represents an abstraction of a primary key.
            </summary>
            <typeparam name="T">The type (System.Type) of the primary key.</typeparam>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IKey`1.Value">
            <summary>
            Gets real value holded by this instance.
            </summary>
            <value>The value of the primary key.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IHandleMessage`1">
            <summary>
            An <c>IHandleMessage</c> is a component spcialized
            in the operation of handling messages, primarly delivered
            by an <c>IMessageBroker</c>. It is designed to be registered
            in an Invertion of Control system in order to do automatic message
            handling.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IHandleMessage">
            <summary>
            An <c>IHandleMessage</c> is a component spcialized
            in the operation of handling messages, primarly delivered
            by an <c>IMessageBroker</c>. It is designed to be registered
            in an Invertion of Control system in order to do automatic message
            handling.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IHandleMessage.Handle(System.Object,System.Object)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IHandleMessage.ShouldHandle(System.Object,System.Object)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <returns>
              <c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IHandleMessage`1.Handle(System.Object,`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IMessage">
            <summary>
            An IMessage is the minum contract that a message needs to implement
            in order to be managed by an <c>IMessageBroker</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.Messaging.IMessage.Sender">
            <summary>
            Gets the message sender.
            </summary>
            <value>The message sender.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.InvocationModel">
            <summary>
            Defines the invocation model for the message subscription.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Messaging.InvocationModel.Default">
            <summary>
            The subscriber is invoked in the context and thread of the dispatcher of the message.
            If the message is broadcasted the subscriber is invoked in a different thread.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Messaging.InvocationModel.Safe">
            <summary>
            The subscriber is invoked in the main thread marshaling the call even 
            if the message has been broadcasted.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IMessageBroker">
            <summary>
            A message broker is a mediator used to dispatch and 
            broadcast messages to all the subscribers in the system.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe``1(System.Object,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the 
            given type of IMessage using the supplied callback.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe(System.Object,System.Type,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="messageType">Type of the message.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe(System.Object,System.Object,System.Type,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe``1(System.Object,System.Object,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the 
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender filter.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe``1(System.Object,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe(System.Object,System.Type,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="messageType">Type of the message.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe(System.Object,System.Object,System.Type,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Subscribe``1(System.Object,System.Object,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender filter.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the subcscriptions.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Unsubscribe``1(System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the subcscriptions to the supplied IMessage type.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Unsubscribe(System.Object,System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the messages
            posted by the given sender.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Unsubscribe``1(System.Object,System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the messages,
            of the given type T, posted by the given sender.
            </summary>
            <typeparam name="T">The message type filter.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Unsubscribe``1(System.Object,System.Delegate)">
            <summary>
            Unsubscribes the specified subscriber from the subcscription to the supplied IMessage type.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="callback">The callback to unsubscribe.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Broadcast``1(``0)">
            <summary>
            Broadcasts the specified message in an asynchronus manner without
            waiting for the execution of the subscribers.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Broadcast(System.Object,System.Object)">
            <summary>
            Broadcasts the specified message in an asynchronus manner without
            waiting for the execution of the subscribers.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Broadcast(System.Type,Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Broadcasts the specified message in an asynchronus manner without
            waiting for the execution of the subscribers.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Dispatch(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for
            the execution of all the subscribers.
            </summary>
            <param name="message">The message to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Dispatch(System.Object,System.Object)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for
            the execution of all the subscribers.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Dispatch``1(``0)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for 
            the execution of all the subscribers.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageBroker.Dispatch(System.Type,Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for
            the execution of all the subscribers.
            </summary>
            <param name="messageType">The Type of the message to dispatch.</param>
            <param name="message">The message to dispatch.</param>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IMessageHandler`1">
            <summary>
            An <c>IMessageHandler</c> is a component spcialized
            in the operation of handling messages, primarly delivered
            by an <c>IMessageBroker</c>. It is designed to be registered
            in an Invertion of Control system in order to do automatic message
            handling.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IMessageHandler">
            <summary>
            An <c>IMessageHandler</c> is a component spcialized
            in the operation of handling messages, primarly delivered
            by an <c>IMessageBroker</c>. It is designed to be registered
            in an Invertion of Control system in order to do automatic message
            handling.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageHandler.Handle(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageHandler.ShouldHandle(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="message">The message.</param>
            <returns><c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IMessageHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.INeedSafeSubscription">
            <summary>
            Determines that a message handler requires to be called in the main thread.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.IRequireToBeValid">
            <summary>
            Identifies a message that has its own validation
            logic that must be called before Dispatch/Broadcast.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.IRequireToBeValid.Validate">
            <summary>
            Validates the current message content.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Messaging.SubscribeToMessageAttribute">
            <summary>
            The SubscribeToMessageAttribute is used to mark <c>IMessageHandler</c>s
            to allow automatic message subscription during the registration process
            of the <c>IMessageHandler</c> into an Invertion of Control container,
            specifically extended to handle ths scenario.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Messaging.SubscribeToMessageAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.Messaging.SubscribeToMessageAttribute"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.Messaging.SubscribeToMessageAttribute.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <value>The type of the message.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1">
            <summary>
            Provides additional data for the CollectionChanged event.
            </summary>
            <typeparam name="T">The type of the item managed by this instance.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.#ctor(Topics.Radical.ComponentModel.CollectionChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1"/> class.
            </summary>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.#ctor(Topics.Radical.ComponentModel.CollectionChangeType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1"/> class.
            </summary>
            <param name="changeType">Type of the change.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.#ctor(Topics.Radical.ComponentModel.CollectionChangeType,System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1"/> class.
            </summary>
            <param name="changeType">Type of the change.</param>
            <param name="index">The index.</param>
            <param name="oldIndex">The old index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.ChangeType">
            <summary>
            The type of change occurred in the collection
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.Index">
            <summary>
            The Index of the changed Item
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.OldIndex">
            <summary>
            The Old Index of the changed item, eg in case of a Move operation
            </summary>
            <value>The old index.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1.Item">
            <summary>
            A reference to the changed Item, this filed will be null
            according to the ChangeType value
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.CollectionChangeType">
            <summary>
            Determines the type of change(s) occurred in
            a <see cref="T:Topics.Radical.ComponentModel.IEntityCollection`1"/>
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.None">
            <summary>
            No changes have occured in the collection
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.SortChanged">
            <summary>
            The sort order of the collection has changed
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.ItemAdded">
            <summary>
            An item has been added to the list
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.ItemRemoved">
            <summary>
            An item has been removed from the list
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.ItemChanged">
            <summary>
            An item has changed
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.Reset">
            <summary>
            When to many changes occurs this is the
            preferred way to notify listener.
            Eg. in this case the DataGrid/DataGridView
            will fully rebind to the list
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.ItemMoved">
            <summary>
            On item has been moved inside the collection
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.CollectionChangeType.ItemReplaced">
            <summary>
            On item has been replaced, the value supplied by the CollectionChanged
            event represents the overwritten value.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityCollection`1">
            <summary>
            Identifies a strongly typed collection, extends this IList, ICollection and IEnumerable generics interfaces.
            </summary>
            <typeparam name="T">The type of object that this collection uses.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.CreateNew">
            <summary>
            Creates a new instance of the type managed by this collection.
            </summary>
            <returns>An instance of the type managed by this collection.</returns>
            <exception cref="T:System.NotSupportedException">The operation is not supported, <see cref="P:Topics.Radical.ComponentModel.IEntityCollection`1.AllowNew"/> property is set to <c>false</c>.</exception>
            <exception cref="T:System.NullReferenceException">The creation process returned a null reference.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.CreateView">
            <summary>
            Creates a new view.
            </summary>
            <returns>An instance of a view.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified item, identified by the <paramref name="oldIndex"/> parameter,
            to a new position, identified by the <paramref name="newIndex"/> parameter, inside
            the collection.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied index (<paramref name="oldIndex"/> or <paramref name="newIndex"/>)
            is outside the bounds of the collection.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.Move(`0,System.Int32)">
            <summary>
            Moves the specified item to a new position, identified by the <paramref name="newIndex"/> 
            parameter, inside the collection.
            </summary>
            <param name="item">The item to move.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="item"/> to move does not belong to this collection.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied index (<paramref name="newIndex"/>)
            is outside the bounds of the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The supplied <paramref name="item"/> is a null reference.</exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.EndInit(System.Boolean)">
            <summary>
            Signals that the initialization process is completed.
            </summary>
            <param name="notify">if set to <c>true</c> raises the <see cref="E:Topics.Radical.ComponentModel.IEntityCollection`1.CollectionChanged"/> event.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.ToArray">
            <summary>
            Copies the elements of the IEntityCollection to a new array.
            </summary>
            <returns>An array containing copies of the elements of the IEntityCollection.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items.
            </summary>
            <param name="list">The range of items ot add.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityCollection`1.AllowNew">
            <summary>
            Gets a value indicating whether this instance is capable of creating a new instance of the managed type T.
            </summary>
            <value><c>true</c> if this.instace allo the creation of new items; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityCollection`1.DefaultView">
            <summary>
            Gets the default view.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="E:Topics.Radical.ComponentModel.IEntityCollection`1.CollectionChanged">
            <summary>
            Occurs when this collection changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityCollection`1.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is loading data.
            </summary>
            <value>
            	<c>true</c> if this instance is loading data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2">
            <summary>
            A specialized PropertyDescriptor
            </summary>
            <typeparam name="T">The type incapsulated by this descriptor</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1">
            <summary>
            A specialized PropertyDescriptor
            </summary>
            <typeparam name="T">The type incapsulated by this descriptor</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1"/> 
            class, creating a custom calculated property. In this case this EntityItemViewPropertyDescriptor
            is not mapped to a real property on the underlying object.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1"/> class.
            The EntityItemViewPropertyDescriptor will be mapped on the given property.
            </summary>
            <param name="property">The property to map to</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1"/> class.
            The EntityItemViewPropertyDescriptor will be mapped on the property given its name.
            </summary>
            <param name="propertyName">The property name to map to, the property must exists on the underlying type</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1"/> class.
            The EntityItemViewPropertyDescriptor will be mapped on the given property name and uses the given
            String as display name.
            </summary>
            <param name="propertyName">The property name to map to, the property must exists on the underlying type</param>
            <param name="customDisplayName">A string used as the DisplayName for this descriptor.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <returns>The default value for this property.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.Property">
            <summary>
            Gets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, such as a Properties window.
            </summary>
            <value></value>
            <returns>The name to display for the member.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the property.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor`1.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <returns>
            The default value for this property.
            </returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.ValueGetter">
            <summary>
            Delegate used to get property value
            </summary>
            <value>The value getter.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.ValueSetter">
            <summary>
            Delegate used to set property value
            </summary>
            <value>The value setter.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.DafaultValueInterceptor">
            <summary>
            Gets or sets the dafault value interceptor.
            </summary>
            <value>
            The dafault value interceptor.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, such as a Properties window.
            </summary>
            <value></value>
            <returns>The name to display for the member.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the property.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.EntityItemViewCustomPropertyDescriptor`2.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.EntityItemViewValueGetter`2">
            <summary>
            Delegate used to get property value
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.EntityItemViewValueSetter`2">
            <summary>
            Delegate used to set property value
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityItemView`1">
            <summary>
            Extends the <see cref="T:Topics.Radical.ComponentModel.IEntityItemView"/> interface.
            </summary>
            <typeparam name="T">The type of the item incapsulated by this item view instance.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityItemView">
            <summary>
            Identifies an item in an <see cref="T:Topics.Radical.ComponentModel.IEntityView"/> object.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.INotifyEditableObject">
            <summary>
            Extends the System.ComponentModel.IEditableObject interface.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.INotifyEditableObject.EditBegun">
            <summary>
            Notifies that an edit operation has begun.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.INotifyEditableObject.EditCanceled">
            <summary>
            Notifies that an edit operation has benn canceled.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.INotifyEditableObject.EditEnded">
            <summary>
            Notifies that an edit operation has ended.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityItemView.Delete">
            <summary>
            Deletes this IEntityItemView and removes if from the view and from the underlying collection.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityItemView.EntityItem">
            <summary>
            Gets the underlying entity item.
            </summary>
            <value>The underlying entity item.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityItemView.View">
            <summary>
            Gets a reference the view that owns this instance.
            </summary>
            <value>The owner view.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityItemView`1.EntityItem">
            <summary>
            Gets the underlying item.
            </summary>
            <value>The underlying item.</value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityItemView`1.View">
            <summary>
            Gets the view that owns thsi instance.
            </summary>
            <value>The owner view.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityItemViewFilter`1">
            <summary>
            Provides a standard method to determine if an object instance 
            should be, or shoud not, included in the result set of a filter
            operation.
            </summary>
            <typeparam name="T">The type of the object to test.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityItemViewFilter">
            <summary>
            Provides a standard method to determine if an object instance 
            should be, or shoud not, included in the result set of a filter
            operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityItemViewFilter.ShouldInclude(System.Object)">
            <summary>
            Gets a value that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>True</c> if the item should be included, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityItemViewFilter`1.ShouldInclude(`0)">
            <summary>
            Gets a value that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>True</c> if the item should be included, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityView`1">
            <summary>
            Extendes the <see cref="T:Topics.Radical.ComponentModel.IEntityView"/> interface by providing
            advanced features. This <c>IEntityView</c> is capable of managing custom properties added at runtime
            in order to build, for example, runtime evaluated colums dinamically.
            </summary>
            <typeparam name="T">The type (System.Type) of objects managed by this collection view.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.IEntityView">
            <summary>
            Extendes the System.ComponentModel.IBindingListView interface by providing
            advanced features.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.CancelNew">
            <summary>
            Cancels a pending AddNew operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.CancelNew(System.Int32)">
            <summary>
            Cancels a pending AddNew operation that is occurring 
            at the specified index.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.EndNew">
            <summary>
            Ends a pending AddNew operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.EndNew(System.Int32)">
            <summary>
            Ends a pending AddNew operation.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView.Move(System.Int32,System.Int32)">
            <summary>
            Moves the element at the specified source index to the specified new index.
            </summary>
            <param name="sourceIndex">Index of the source element to move.</param>
            <param name="newIndex">The destination index.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.IsAddingNew">
            <summary>
            Gets a value indicating whether this instance is adding a new item.
            </summary>
            <value>
            	<c>true</c> if this instance is adding a new item; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.IsArrayBased">
            <summary>
            Gets a value indicating whether this instance is array based.
            Being an arrya based instance means that this list is a read-only list.
            </summary>
            <value>
            	<c>true</c> if this instance is array based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.IsFiltered">
            <summary>
            Gets a value indicating whether this instance is currently filtered.
            </summary>
            <value>
            	<c>true</c> if this instance is currently filtered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source
            </summary>
            <returns>The filter used to filter out in the item collection returned by the data source. </returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.DataSource">
            <summary>
            Gets the underlying data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="E:Topics.Radical.ComponentModel.IEntityView.FilterChanged">
            <summary>
            Occurs when the applyed filter changes.
            </summary>
        </member>
        <member name="E:Topics.Radical.ComponentModel.IEntityView.SortChanged">
            <summary>
            Occurs when the sort changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView.AllowMove">
            <summary>
            Gets a value indicating whether moving elements is allowed in this view.
            </summary>
            <value><c>true</c> if move is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.AddPropertyMapping``1(System.String,Topics.Radical.ComponentModel.EntityItemViewValueGetter{`0,``0},Topics.Radical.ComponentModel.EntityItemViewValueSetter{`0,``0})">
            <summary>
            Adds a property mapping using the specified display name, the supplied property type and the supplied getter and setter.
            </summary>
            <param name="calculatedPropertyDisplayName">The display name of the new property.</param>
            <param name="customPropertyType">The type of the new custom property.</param>
            <param name="getter">A delegate to call in order to get the value of the dinamically generated property.</param>
            <param name="setter">A delegate to call in order to set the value of the dinamically generated property.</param>
            <returns>A reference to the dinamically generated property.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.AddPropertyMapping``1(System.String,Topics.Radical.ComponentModel.EntityItemViewValueGetter{`0,``0})">
            <summary>
            Adds a property mapping using the specified display name, the supplied property type and the supplied getter.
            </summary>
            <param name="calculatedPropertyDisplayName">Calculated name of the property display.</param>
            <param name="customPropertyType">Type of the custom property.</param>
            <param name="getter">A delegate to call in order to get the value of the dinamically generated property.</param>
            <returns>A reference to the dinamically generated property.</returns>
            <remarks>Using this overload implicitly creates a read-only property because no setter has been supplied.</remarks>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.AddPropertyMapping(System.String,System.String)">
            <summary>
            Adds a property mapping that maps a property using the supplied display name.
            </summary>
            <param name="propertyName">Name of the property to map to.</param>
            <param name="displayName">The display name.</param>
            <returns>A reference to the dinamically generated property.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.AddPropertyMapping(Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor{`0})">
            <summary>
            Adds a property mapping using the supplied property descriptor instance.
            </summary>
            <param name="customProperty">The custom property descriptor to use as mapping.</param>
            <returns>A reference to the dinamically generated property.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.AddPropertyMapping(System.String)">
            <summary>
            Adds a property mapping that maps the supplied property.
            </summary>
            <param name="propertyName">Name of the property to map to.</param>
            <returns>A reference to the dinamically generated property.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.RemovePropertyMapping(Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor{`0})">
            <summary>
            Removes the property mapping.
            </summary>
            <param name="customProperty">The custom property.</param>
            <returns><c>True</c> if the operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.RemovePropertyMapping(System.String)">
            <summary>
            Removes the property mapping.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>True</c> if the operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.GetCustomProperties">
            <summary>
            Gets the all the dinamically added custom property mappings.
            </summary>
            <returns>A read-only list af duìinamically added property mappings.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.Move(Topics.Radical.ComponentModel.IEntityItemView{`0},System.Int32)">
            <summary>
            Moves the specified item to the specified new index.
            </summary>
            <param name="item">The item to move.</param>
            <param name="newIndex">The destination index.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.IEntityView`1.ApplyFilter(System.Predicate{`0})">
            <summary>
            Applies the given filter.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView`1.AutoGenerateProperties">
            <summary>
            Gets or sets a value indicating whether this instance must auto generate property mappings.
            </summary>
            <value>
            	<c>true</c> if this instance must auto generate property mappings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.ComponentModel.IEntityView`1.Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source
            </summary>
            <returns>The filter used to filter out in the item collection returned by the data source. </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IBatchCommand">
            <summary>
            Represents the base interface for all the batch commands
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IBatchCommandEngine`2">
            <summary>
            Represents the base interface for all the batch commands engines.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IBatchCommandEngine`2.Execute(`0,`1)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="provider">The provider to use for execution.</param>
            <returns>
            THe number of affected elements.
            </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IQueryEngine`3">
            <summary>
            Defines the contract of a query engine.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IQueryEngine`3.ExecuteQuery(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{`0,`1},Topics.Radical.ComponentModel.IDataContext,`2)">
            <summary>
            Executes the given query against the given provider.
            </summary>
            <param name="querySpec">The query specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IQueryEngine`4">
            <summary>
            Defines the contract of a query engine.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IQueryEngine`4.ExecuteQuery(`0,Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Executes the given query against the given provider.
            </summary>
            <param name="querySpec">The query specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IQuerySpecification`2">
            <summary>
            Defines a specification with support for projections.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.ISpecification`2">
            <summary>
            Represents the base interface for all the specification: 
            inheritors are expected to inherit from more specific contracts.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IQuerySpecification`1">
            <summary>
            Defines a specification that does not require a projection
            </summary>
            <typeparam name="T">The type of the source and of the expected result.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IQuerySystemManager">
            <summary>
            A query system is the main entry point to retrieve 
            query engine and scalar evaluator instances. A query
            system manager is not intended to be used directly by 
            the application, a query system manager is used by the 
            <see cref="T:Topics.Radical.ComponentModel.IDataContext"/> infrastructure.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IQuerySystemManager.GetQueryEngine``3(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{``0,``1})">
            <summary>
            Gets the query engine for the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result entity.</typeparam>
            <typeparam name="TProvider">The type of the query provider/session/data context.</typeparam>
            <param name="querySpec">The query specication to search an engine for.</param>
            <returns>A query engine instance.</returns>
            <exception cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException">
            A <c>SpecificationNotSupportedException</c> is raised if the infrastructure cannot 
            find a suitable engine for the given specification.
            </exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IQuerySystemManager.GetScalarEvaluator``3(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{``0,``1})">
            <summary>
            Gets the scalar evaluator for the given scalar specification.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result entity.</typeparam>
            <typeparam name="TProvider">The type of the query provider/session/data context.</typeparam>
            <param name="scalarSpec">The scalar spec to search an engine for.</param>
            <returns>A scalar specification engine instance.</returns>
            <exception cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException">
            A <c>SpecificationNotSupportedException</c> is raised if the infrastructure cannot 
            find a suitable engine for the given specification.
            </exception>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IQuerySystemManager.GetBatchCommandEngine``2(``0)">
            <summary>
            Gets the batch command engine.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="command">The command.</param>
            <returns>
            The bengine responsible for the execution of the given command.
            </returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IScalarEvaluator`3">
            <summary>
            Defines the contract of a scalar evaluator.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IScalarEvaluator`3.Evaluate(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{`0,`1},Topics.Radical.ComponentModel.IDataContext,`2)">
            <summary>
            Evaluates the specified scalar specification against the given provider.
            </summary>
            <param name="scalarSpec">The scalar specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>The searched entity.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IScalarEvaluator`4">
            <summary>
            Defines the contract of a scalar evaluator.
            </summary>
            <typeparam name="TScalar">The type of the scalar.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.IScalarEvaluator`4.Evaluate(`0,Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Evaluates the specified scalar specification against the given provider.
            </summary>
            <param name="scalarSpec">The scalar specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>The searched entity.</returns>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IScalarSpecification`2">
            <summary>
            Defines a scalar specification with support for projections.
            </summary>
            <remarks>A scalar specification is expected to return a single result.</remarks>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.IScalarSpecification`1">
            <summary>
            Defines a scalar specification that does not require a projection
            </summary>
            <remarks>A scalar specification is expected to return a single result.</remarks>
            <typeparam name="T">The type of the source and of the expected result.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException">
            <summary>
            The excpetion raised when the infrastructure cannot find any
            engine for a given specification.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Validation.IRequireValidationCallback`1">
            <summary>
            Identifies an object that wants to plug custom
            validation logic into the validation process.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IRequireValidationCallback`1.OnValidate(Topics.Radical.Validation.ValidationContext{`0})">
            <summary>
            Called by a validation service to let the 
            implmentors inject custom validation logic 
            into the validation process.
            </summary>
            <param name="context">The validation context.</param>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Validation.IValidator`1">
            <summary>
            Defines the base contract for a validator strongly typed for
            a specific entity.
            </summary>
            <typeparam name="T">The type of the validated entity.</typeparam>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.IsValid(`0)">
            <summary>
            Determines whether the specified entity is valid.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.Validate(`0,System.String)">
            <summary>
            Validates the specified property of the given entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns>
            An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.Validate``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Validates the specified property of the given entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="entity">The entity.</param>
            <param name="property">The property to validate.</param>
            <returns>
            An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.AddRule(System.Action{Topics.Radical.Validation.ValidationContext{`0}})">
            <summary>
            Adds the given rule to the list of the validation rules.
            </summary>
            <param name="rule">The rule to add.</param>
            <returns>The current validator instance.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidator`1.AddRule(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Topics.Radical.Validation.ValidationContext{`0},Topics.Radical.ComponentModel.Validation.RuleEvaluation},System.String)">
            <summary>
            Adds the given rule to the list of the validation rules.
            </summary>
            <param name="propertyIdentifier">The property identifier.</param>
            <param name="rule">The rule to add.</param>
            <param name="error">The error if the given rule is not valid.</param>
            <returns>The current validator instance.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.Validation.IValidator`1.RuleSet">
            <summary>
            Gets the rule set.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Validation.RuleEvaluation">
            <summary>
            Identifies the result of a rule evaluation.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Validation.RuleEvaluation.Succeeded">
            <summary>
            The rule evaluates successfully.
            </summary>
        </member>
        <member name="F:Topics.Radical.ComponentModel.Validation.RuleEvaluation.Failed">
            <summary>
            The rule evaluation failed, the result is invalid.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Validation.IValidatorFactory">
            <summary>
            Identifies a factory whose capability is to 
            create validators.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidatorFactory.CreateValidator``1">
            <summary>
            Creates a validator for the given entity type.
            </summary>
            <typeparam name="T">The entity type to validate.</typeparam>
            <returns>An instance of the requested validator.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Validation.IValidatorFactory.CreateValidator``1(System.String)">
            <summary>
            Creates a validator, that uses the given rule set, 
            for the given entity.
            </summary>
            <typeparam name="T">The entity type to validate.</typeparam>
            <param name="ruleSet">The rule set to pass to the 
            newly created validator.</param>
            <returns>An instance of the requested validator.</returns>
        </member>
        <member name="T:Topics.Radical.BootableFacility">
            <summary>
            Defines a facility that automatically boot a component at registration time.
            </summary>
        </member>
        <member name="M:Topics.Radical.BootableFacility.Initialize(Topics.Radical.ComponentModel.IPuzzleContainer)">
            <summary>
            Initializes this facility.
            </summary>
            <param name="container">The container hosting the facility.</param>
        </member>
        <member name="M:Topics.Radical.BootableFacility.Teardown(Topics.Radical.ComponentModel.IPuzzleContainer)">
            <summary>
            Teardowns this facility.
            </summary>
            <param name="container">The container hosting the facility.</param>
        </member>
        <member name="T:Topics.Radical.EntryBuilder">
            <summary>
            Helper class to fluently create Puzzle container entries.
            </summary>
        </member>
        <member name="M:Topics.Radical.EntryBuilder.For(System.Type)">
            <summary>
            Creates a new container entry for the specified type.
            </summary>
            <param name="type">The type to create entry for.</param>
            <returns>The container entry.</returns>
        </member>
        <member name="M:Topics.Radical.EntryBuilder.For``1">
            <summary>
            Creates a new container entry for the specified type.
            </summary>
            <typeparam name="T">The type to create entry for.</typeparam>
            <returns>
            The container entry.
            </returns>
        </member>
        <member name="T:Topics.Radical.PuzzleContainer">
            <summary>
            The Puzzle inversion of control container.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.PuzzleContainer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.OnComponentRegistered(Topics.Radical.ComponentModel.ComponentRegisteredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentRegistered"/> event.
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.ComponentModel.ComponentRegisteredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.PuzzleContainer"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Register(Topics.Radical.ComponentModel.IContainerEntry)">
            <summary>
            Registers the specified entry in this container.
            </summary>
            <param name="entry">The entry to register.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Register(System.Collections.Generic.IEnumerable{Topics.Radical.ComponentModel.IContainerEntry})">
            <summary>
            Registers all the specified entries.
            </summary>
            <param name="entries">The entries to register.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Resolve``1">
            <summary>
            Resolves the specified service type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>The resolved service instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.Resolve(System.Type)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">The Type of the service.</param>
            <returns>The resolved service instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.IsRegistered``1">
            <summary>
            Determines whether the given service type is registered.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
            	<c>true</c> if the given service type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.AddFacility(Topics.Radical.ComponentModel.IPuzzleContainerFacility)">
            <summary>
            Adds the given facility instance to this container.
            </summary>
            <param name="facility">The facility.</param>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.AddFacility``1">
            <summary>
            Adds a new facility.
            </summary>
            <typeparam name="TFacility">The type of the facility.</typeparam>
            <returns>This container instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainer.GetFacilities">
            <summary>
            Gets all the installed facilities.
            </summary>
            <returns>A readonly list of all the installed facilities.</returns>
        </member>
        <member name="E:Topics.Radical.PuzzleContainer.ComponentRegistered">
            <summary>
            Occurs when a component is registered in this container.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainerEntry`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.PuzzleContainerEntry`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.PuzzleContainerEntry`1.Topics#Radical#ComponentModel#IPuzzleContainerEntry{T}#ImplementedBy(System.Type)">
            <summary>
            Defines the type that implements the service.
            </summary>
            <param name="componentType">The type of the component.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainerEntry`1.Topics#Radical#ComponentModel#IPuzzleContainerEntry{T}#ImplementedBy``1">
            <summary>
            Defines the type that implements the service.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainerEntry`1.Topics#Radical#ComponentModel#IPuzzleContainerEntry#ImplementedBy(System.Type)">
            <summary>
            Defines the type that implements the service.
            </summary>
            <param name="componentType">The type of the component.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="M:Topics.Radical.PuzzleContainerEntry`1.Topics#Radical#ComponentModel#IPuzzleContainerEntry#WithLifestyle(Topics.Radical.ComponentModel.Lifestyle)">
            <summary>
            Defines the lifestyle of this entry.
            </summary>
            <param name="lifestyle">The lifestyle.</param>
            <returns>This entry instance.</returns>
        </member>
        <member name="P:Topics.Radical.PuzzleContainerEntry`1.Lifestyle">
            <summary>
            Gets the lifestyle of ths component.
            </summary>
            <value>The lifestyle.</value>
        </member>
        <member name="P:Topics.Radical.PuzzleContainerEntry`1.Factory">
            <summary>
            Gets the factory used to build up a concrete type.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Topics.Radical.PuzzleContainerEntry`1.Service">
            <summary>
            Gets the service type.
            </summary>
            <value>The service type.</value>
        </member>
        <member name="P:Topics.Radical.PuzzleContainerEntry`1.Component">
            <summary>
            Gets the component type.
            </summary>
            <value>The component type.</value>
        </member>
        <member name="T:Topics.Radical.DataBinding.EnumBinder`1">
            <summary>
            Represents a mean to bind enuration types to controls treating enumeration types
            as a common IList of items.
            </summary>
        </member>
        <member name="M:Topics.Radical.DataBinding.EnumBinder`1.#ctor(Topics.Radical.EnumItemDescriptionAttribute,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DataBinding.EnumBinder`1"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.DataBinding.EnumBinder`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DataBinding.EnumBinder`1"/> class.
            </summary>
            <param name="caption">The caption.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.DataBinding.EnumBinder`1.#ctor(System.String,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DataBinding.EnumBinder`1"/> class.
            </summary>
            <param name="caption">The caption.</param>
            <param name="value">The value.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.DataBinding.EnumBinder`1.#ctor(System.String,System.String,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DataBinding.EnumBinder`1"/> class.
            </summary>
            <param name="caption">The caption.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Topics.Radical.DataBinding.EnumBinder`1.Caption">
            <summary>
            Gets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Topics.Radical.DataBinding.EnumBinder`1.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Topics.Radical.DataBinding.EnumBinder`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Topics.Radical.DataBinding.EnumBinder`1.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="M:Topics.Radical.Data.Adapters.IDataAdapter`2.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.Adapters.IDataAdapter`2.Adapt(`0)">
            <summary>
            Adapts the specified source to a known destination.
            </summary>
            <param name="source">The source to pick data from.</param>
            <returns>An instance of the specified known class containing source data.</returns>
        </member>
        <member name="M:Topics.Radical.Data.Adapters.IDataFiller`2.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.Adapters.IDataFiller`2.Fill(`0,`1)">
            <summary>
            Adapts the specified source filling the given destination instance.
            </summary>
            <param name="source">The source.</param>
            <param name="instance">The destination instance to fill.</param>
            <returns>The adapted destination instance.</returns>
        </member>
        <member name="T:Topics.Radical.Data.DataBase">
            <summary>
            A default abstract implementation of the IDataBase interface.
            </summary>
        </member>
        <member name="T:Topics.Radical.Data.IDataBase">
            <summary>
            Abstract the access logic to a database exposing a fluent
            interface to execute database commands, perform operations
            and read data.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.AddParameter(System.Data.IDataParameter)">
            <summary>
            Adds the given parameter to the parameters that will 
            be passed to the command.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <returns>A reference to self to allow a fluent interface usage scenario.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.AddParameterRange(System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            Adds the given list of parameters.
            </summary>
            <param name="range">The range of parameters to add.</param>
            <returns>A reference to self to allow a fluent interface usage scenario.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.AddParameterRange(System.Data.IDataParameterCollection)">
            <summary>
            Adds the given list of parameters.
            </summary>
            <param name="range">The range of parameters to add.</param>
            <returns>A reference to self to allow a fluent interface usage scenario.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.UseCommand(System.String)">
            <summary>
            Set the command that will be used against the database.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>A reference to self to allow a fluent interface usage scenario.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.As(System.Data.CommandType)">
            <summary>
            Specify the type of the command that will be sent 
            to the underlying database. The default value is StoredProcedure.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>A reference to self to allow a fluent interface usage scenario.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the Connection object of a 
            .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.ExecuteReader">
            <summary>
            Executes the given command text and builds an IDataReader.
            </summary>
            <returns>An forward/read-only cursor for reading from the datasource.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.ExecuteReader``1">
            <summary>
            Executes the given command text and builds a strongly typed data reader.
            </summary>
            <typeparam name="T">The type of the data reader to return.</typeparam>
            <returns>An forward/read-only cursor for reading from the datasource.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first 
            row in the resultset returned by the query. Extra columns or 
            rows are ignored.
            </summary>
            <returns>The value of the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataBase.ExecuteScalar``1">
            <summary>
            Executes the query, and returns the first column of the first 
            row in the resultset returned by the query. Extra columns or 
            rows are ignored.
            </summary>
            <returns>The value of the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.GetConnection">
            <summary>
            Gets the connection to the database.
            </summary>
            <returns>An IDbConnection instance.</returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.CreateCommand(System.Data.IDbConnection)">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">The connection to create the command for.</param>
            <returns>An instance of an IDbCommand.</returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Data.DataBase"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.#ctor(System.String,System.String,System.Data.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Data.DataBase"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="connectionString">The connection string.</param>
            <param name="defaultCommandType">Default type of the command.</param>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Data.DataBase"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.#ctor(System.Data.Common.DbConnection,System.Data.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Data.DataBase"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="defaultCommandType">Default type of the command.</param>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.UseCommand(System.String)">
            <summary>
            Set the command that will be used against the database.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>
            A reference to self to allow a fluent interface usage scenario.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.As(System.Data.CommandType)">
            <summary>
            Specify the type of the command that will be sent
            to the underlying database. The default value is StoredProcedure.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>
            A reference to self to allow a fluent interface usage scenario.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.AddParameter(System.Data.IDataParameter)">
            <summary>
            Adds the given parameter to the parameters that will
            be passed to the command.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <returns>
            A reference to self to allow a fluent interface usage scenario.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.AddParameterRange(System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            Adds the given list of parameters.
            </summary>
            <param name="range">The range of parameters to add.</param>
            <returns>
            A reference to self to allow a fluent interface usage scenario.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.ExecuteReader``1">
            <summary>
            Executes the given command text and builds a strongly typed data reader.
            </summary>
            <typeparam name="T">The type of the data reader to return.</typeparam>
            <returns>
            An forward/read-only cursor for reading from the datasource.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.ExecuteReader">
            <summary>
            Executes the given command text and builds an IDataReader.
            </summary>
            <returns>
            An forward/read-only cursor for reading from the datasource.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first
            row in the resultset returned by the query. Extra columns or
            rows are ignored.
            </summary>
            <returns>
            The value of the first column of the first row in the resultset.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataBase.ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the Connection object of a
            .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <returns>
            The number of rows affected by the command.
            </returns>
        </member>
        <member name="T:Topics.Radical.Data.IDataCommand">
            <summary>
            Base interface that incapsulates all the logic
            of a data command.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.IDataCommand.AddParameter(System.Data.IDataParameter)">
            <summary>
            Adds a parameter to this command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>A reference to this command, usefull for fluent interfaces.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataCommand.AddParameterRange(System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            Adds the given parameter array to this command.
            </summary>
            <param name="range">The range.</param>
            <returns>A reference to this command, usefull for fluent interfaces.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataCommand.ExecuteNonQuery">
            <summary>
            Executes a non query command.
            </summary>
            <returns>The number of records affected by the command.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataCommand.ExecuteReader">
            <summary>
            Executes the command and returns a data reader.
            </summary>
            <returns>A forward only cursor for data reading.</returns>
        </member>
        <member name="M:Topics.Radical.Data.IDataCommand.ExecuteScalar">
            <summary>
            Executes a scalar command.
            </summary>
            <returns>The result of the scalar command.</returns>
        </member>
        <member name="P:Topics.Radical.Data.IDataCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="!:SqlDataCommand"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><collection>true</collection> to release both managed and unmanaged resources; <collection>false</collection> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.ExecuteNonQuery">
            <summary>
            Executes a non query command.
            </summary>
            <returns>
            The number of records affected by the command.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.ExecuteScalar(System.String)">
            <summary>
            Executes a scalar command.
            </summary>
            <returns>The result of the scalar command.</returns>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.Topics#Radical#Data#IDataCommand#ExecuteReader">
            <summary>
            Executes the command and returns a data reader.
            </summary>
            <returns>A forward only cursor for data reading.</returns>
        </member>
        <member name="M:Topics.Radical.Data.DataCommand.Topics#Radical#Data#IDataCommand#AddParameter(System.Data.IDataParameter)">
            <summary>
            Adds a parameter to this command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            A reference to this command, usefull for fluent interfaces.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DataCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Data.DbConnectionWrapper"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists in the specified transaction.
            </summary>
            <param name="transaction">A reference to an existing <see cref="T:System.Transactions.Transaction"/> in which to enlist.</param>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.GetSchema">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/> using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/> using the specified string for the schema name and the specified string array for the restriction values.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction.
            </summary>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
            <returns>
            An object representing the new transaction.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open connection.
            </summary>
            <param name="databaseName">Specifies the name of the database for the connection to use.</param>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <exception cref="T:System.Data.Common.DbException">
            The connection-level error that occurred while opening the connection.
            </exception>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object associated with the current connection.
            </summary>
            <returns>
            A <see cref="T:System.Data.Common.DbCommand"/> object.
            </returns>
        </member>
        <member name="M:Topics.Radical.Data.DbConnectionWrapper.Open">
            <summary>
            Opens a database connection with the settings specified by the <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.ConnectionTimeout">
            <summary>
            Gets the time to wait while establishing a connection before terminating the attempt and generating an error.
            </summary>
            <value></value>
            <returns>
            The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.ConnectionString">
            <summary>
            Gets or sets the string used to open the connection.
            </summary>
            <value></value>
            <returns>
            The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.DataSource">
            <summary>
            Gets the name of the database server to which to connect.
            </summary>
            <value></value>
            <returns>
            The name of the database server to which to connect. The default value is an empty string.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.
            </summary>
            <value></value>
            <returns>
            The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is connected.
            </summary>
            <value></value>
            <returns>
            The version of the database. The format of the string returned depends on the specific type of connection you are using.
            </returns>
        </member>
        <member name="P:Topics.Radical.Data.DbConnectionWrapper.State">
            <summary>
            Gets a string that describes the state of the connection.
            </summary>
            <value></value>
            <returns>
            The state of the connection. The format of the string returned depends on the specific type of connection you are using.
            </returns>
        </member>
        <member name="T:Topics.Radical.Diagnostics.EnsurePreviewExtensions">
            <summary>
            Defines some extensions facilities for the <see cref="T:Topics.Radical.Validation.Ensure"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Diagnostics.EnsurePreviewExtensions.LogErrorsTo``1(Topics.Radical.Validation.IEnsure{``0},System.Diagnostics.TraceSource)">
            <summary>
            Logs the errors to raised by the ensure infrastructure using the given logger.
            </summary>
            <typeparam name="T">The validated data type.</typeparam>
            <param name="validator">The validator.</param>
            <param name="logger">The logger.</param>
            <returns>The current validator for fluent interface usage.</returns>
        </member>
        <member name="T:Topics.Radical.Diagnostics.New">
            <summary>
            Entry point to create a new logical operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Diagnostics.New.#ctor(System.Object)">
            <summary>
            Prevents a default instance of the <see cref="T:Topics.Radical.Diagnostics.New"/> class from being created.
            </summary>
            <param name="operationId">The operation id.</param>
        </member>
        <member name="M:Topics.Radical.Diagnostics.New.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Diagnostics.New.LogicalOperation(System.Object)">
            <summary>
            Creates a new logical operation.
            </summary>
            <param name="operationId">The operation id.</param>
            <returns>A self stopping logical operation instance.</returns>
        </member>
        <member name="T:Topics.Radical.Diagnostics.ObjectDumper">
            <summary>
            Dumps values of an object graph for debuggin/diagnostics purposes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Diagnostics.ObjectDumper.Dump(System.Object)">
            <summary>
            Dumps values of the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>A string representing the object dump.</returns>
        </member>
        <member name="M:Topics.Radical.Diagnostics.ObjectDumper.Dump(System.Object,System.Int32)">
            <summary>
            Dumps values of the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="depth">The depth of the dump.</param>
            <returns>A string representing the object dump.</returns>
        </member>
        <member name="M:Topics.Radical.Diagnostics.ObjectDumper.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Topics.Radical.Diagnostics.ObjectDumper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Diagnostics.ObjectDumper"/> class.
            </summary>
            <param name="depth">The depth.</param>
        </member>
        <member name="T:Topics.Radical.EnumItemDescriptionAttribute">
            <summary>
            Attribue specialized in adding description info to an enuration type.
            </summary>
        </member>
        <member name="M:Topics.Radical.EnumItemDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="caption">The description.</param>
        </member>
        <member name="M:Topics.Radical.EnumItemDescriptionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="caption">The description.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.EnumItemDescriptionAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="caption">The caption.</param>
            <param name="description">The description.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.EnumItemDescriptionAttribute.OnGetCaption(System.String)">
            <summary>
            Called by Caption getter, override this
            method to customize Caption return value
            </summary>
            <param name="caption">The caption.</param>
            <returns>
            The Caption value.
            </returns>
        </member>
        <member name="M:Topics.Radical.EnumItemDescriptionAttribute.OnGetDescription(System.String)">
            <summary>
            Called by Description getter, override this
            method to customize Description return value
            </summary>
            <returns>The Description value.</returns>
        </member>
        <member name="P:Topics.Radical.EnumItemDescriptionAttribute.Caption">
            <summary>
            Gets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Topics.Radical.EnumItemDescriptionAttribute.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Topics.Radical.EnumItemDescriptionAttribute.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="T:Topics.Radical.LocalizableEnumItemDescriptionAttribute">
            <summary>
            Extend the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> providing localization
            functionalities.
            </summary>
        </member>
        <member name="M:Topics.Radical.LocalizableEnumItemDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.LocalizableEnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="captionKey">The description key.</param>
        </member>
        <member name="M:Topics.Radical.LocalizableEnumItemDescriptionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.LocalizableEnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="captionKey">The caption key.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.LocalizableEnumItemDescriptionAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.LocalizableEnumItemDescriptionAttribute"/> class.
            </summary>
            <param name="captionKey">The caption key.</param>
            <param name="descriptionKey">The description key.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.LocalizableEnumItemDescriptionAttribute.OnGetCaption(System.String)">
            <summary>
            Called by Caption getter, override this
            method to customize Caption return value
            </summary>
            <param name="caption">The caption.</param>
            <returns>
            The Caption value.
            </returns>
        </member>
        <member name="M:Topics.Radical.LocalizableEnumItemDescriptionAttribute.OnGetDescription(System.String)">
            <summary>
            Called by Description getter, override this
            method to customize Description return value
            </summary>
            <param name="description"></param>
            <returns>
            The Description value.
            </returns>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.ResourceManager">
            <summary>
            Gets the resource manager.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.CaptionFallbackValue">
            <summary>
            Gets or sets the caption fallback value.
            </summary>
            <value>
            The caption fallback value.
            </value>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.DescriptionFallbackValue">
            <summary>
            Gets or sets the description fallback value.
            </summary>
            <value>
            The description fallback value.
            </value>
        </member>
        <member name="P:Topics.Radical.LocalizableEnumItemDescriptionAttribute.AssemblyLocationBehavior">
            <summary>
            Gets or sets the assembly location behavior.
            </summary>
            <value>
            The assembly location behavior.
            </value>
        </member>
        <member name="T:Topics.Radical.ResourceAssemblyLocationBehavior">
            <summary>
            Determines how the assembly is located by the resource manager.
            </summary>
        </member>
        <member name="F:Topics.Radical.ResourceAssemblyLocationBehavior.ByAssemblyName">
            <summary>
            Identify the assembly given its name.
            </summary>
        </member>
        <member name="F:Topics.Radical.ResourceAssemblyLocationBehavior.UseExecutingAssembly">
            <summary>
            Use the executing assembly.
            </summary>
        </member>
        <member name="F:Topics.Radical.ResourceAssemblyLocationBehavior.UseCallingAssembly">
            <summary>
            Use the calling assembly.
            </summary>
        </member>
        <member name="F:Topics.Radical.ResourceAssemblyLocationBehavior.UseEntryAssembly">
            <summary>
            Use the entry assembly.
            </summary>
        </member>
        <member name="T:Topics.Radical.EnumValueOutOfRangeException">
            <summary>
            An <c>EnumValueOutOfRangeException</c> is raised whenever the validation
            process of an enumeration value determines that the supplied value is not
            defined by the enum type that has been validated.
            </summary>
        </member>
        <member name="M:Topics.Radical.EnumValueOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumValueOutOfRangeException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Topics.Radical.EnumValueOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumValueOutOfRangeException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.EnumValueOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumValueOutOfRangeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.EnumValueOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.EnumValueOutOfRangeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Topics.Radical.MissingContractAttributeException">
            <summary>
            Exception raised to notify that the <see cref="T:Topics.Radical.ComponentModel.ContractAttribute"/>
            cannot be found on the searched entity.
            </summary>
        </member>
        <member name="T:Topics.Radical.RadicalException">
            <summary>
            A base exception class for all Radical exceptions.
            </summary>
        </member>
        <member name="M:Topics.Radical.RadicalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.RadicalException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Topics.Radical.RadicalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.RadicalException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.RadicalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.RadicalException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.RadicalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.RadicalException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.MissingContractAttributeException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.MissingContractAttributeException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.MissingContractAttributeException"/> class.
            </summary>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.MissingContractAttributeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.MissingContractAttributeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Topics.Radical.MissingContractAttributeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Topics.Radical.MissingContractAttributeException.TargetType">
            <summary>
            Gets the type on witch the contract atttribute is missing.
            </summary>
            <value>The type on witch the contract atttribute is missing.</value>
        </member>
        <member name="T:Topics.Radical.SuspendedChangeTrackingServiceException">
            <summary>
            The <c>SuspendedChangeTrackingServiceException</c> is raised whenever a request
            to a change tracking service is performed but the service is in suspended state.
            In order to prevent the exception the caller should check the <c>IsSuspended</c>
            property of the service.
            </summary>
        </member>
        <member name="M:Topics.Radical.SuspendedChangeTrackingServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.SuspendedChangeTrackingServiceException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Topics.Radical.SuspendedChangeTrackingServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.SuspendedChangeTrackingServiceException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.SuspendedChangeTrackingServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.SuspendedChangeTrackingServiceException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.SuspendedChangeTrackingServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.SuspendedChangeTrackingServiceException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Topics.Radical.ArrayExtensions">
            <summary>
            Adds beheviors to arrays of data.
            </summary>
        </member>
        <member name="M:Topics.Radical.ArrayExtensions.IsSameAs``1(``0[],``0[])">
            <summary>
            Determines whether two arrays are structurally, structure and content, equals.
            </summary>
            <typeparam name="T">The type of the array data.</typeparam>
            <param name="source">The source array.</param>
            <param name="other">The array to compare to.</param>
            <returns>
            	<c>true</c> if the two arrays are structurally equals; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ArrayExtensions.IsSameAs``1(``0[],``0[],System.Func{``0,``0,System.Boolean})">
            <summary>
            Determines whether two arrays are structurally, structure and 
            content, equals using the supplied item comparer to compare
            items equality.
            </summary>
            <typeparam name="T">The type of the array data.</typeparam>
            <param name="source">The source array.</param>
            <param name="other">The array to compare to.</param>
            <param name="itemComparer">The item comparer.</param>
            <returns>
            	<c>true</c> if the two arrays are structurally equals; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions">
            <summary>
            Adds behaviors to an <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.GetNewItems``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Get the items that has been created.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="service">The service.</param>
            <returns>The requested list.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.GetChangedItems``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Get the items that has been modified.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="service">The service.</param>
            <returns>The requested list.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.GetDeletedItems``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Get the items that has been deleted.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="service">The service.</param>
            <returns>The requested list.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.GetRemovedItems``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Get the items that has been deleted but being marked
            as transient is a nonsense to remove them from the
            underlying storage, simply dispose its instance if required.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="service">The service.</param>
            <returns>The requested list.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.Attach``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,``0)">
            <summary>
            Attaches the specified source entity to the change tracking service.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="service">The service to attach the entity to.</param>
            <param name="source">The source entity.</param>
            <returns>The attached entity.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.ChangeTrackingServiceExtensions.Attach``1(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Attaches the specified list of entities to the change tracking service.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="service">The service to attach the entity to.</param>
            <param name="data">The source entity list.</param>
            <returns>The attached entity list.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.MementoExtensions">
            <summary>
            Extends <c>IMemento</c> interface providing shortcuts
            to inspect the state of the object against its memento.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.MementoExtensions.IsTransient(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Determines whether the specified entity is transient.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is transient; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the supplied entity is not tracked by a change tracking service.</exception>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.MementoExtensions.IsChanged(Topics.Radical.ComponentModel.ChangeTracking.IMemento)">
            <summary>
            Determines whether the specified entity is changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is changed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the supplied entity is not tracked by a change tracking service.</exception>
        </member>
        <member name="T:Topics.Radical.ConsoleColorExtensions">
            <summary>
            Adds behviors to the <see cref="T:System.ConsoleColor"/> enum.
            </summary>
        </member>
        <member name="M:Topics.Radical.ConsoleColorExtensions.AsForegroundColor(System.ConsoleColor)">
            <summary>
            Using the given color as the console foreground.
            </summary>
            <param name="color">The color to use.</param>
            <returns>A IDisposable instance to automatically revert the foreground color on dispose.</returns>
        </member>
        <member name="T:Topics.Radical.Conversions.CastExtensions">
            <summary>
            Adds behaviors, in the cast/as space, to the base object class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Conversions.CastExtensions.CastTo``1(System.Object)">
            <summary>
            Casts the source object to the given type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="obj">The source object.</param>
            <returns>The casted object.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.CastExtensions.As``1(System.Object)">
            <summary>
            Performs a safe cast, using the as operator, of the source object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="obj">The source object.</param>
            <returns>The casted object or null.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.CastExtensions.As``1(System.Object,System.Action)">
            <summary>
            Performs a safe cast, using the as operator, of the source object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="obj">The source object.</param>
            <param name="invalidCastAction">The invalid cast action.</param>
            <returns>The casted object or null.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.CastExtensions.As``1(System.Object,System.Action{``0})">
            <summary>
            Performs a safe cast, using the as operator, of the source object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="obj">The source object.</param>
            <param name="validCastAction">The valid cast action.</param>
            <returns>The casted object or null.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.CastExtensions.As``1(System.Object,System.Action{``0},System.Action)">
            <summary>
            Performs a safe cast, using the as operator, of the source object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="obj">The source object.</param>
            <param name="validCastAction">The valid cast action.</param>
            <param name="invalidCastAction">The invalid cast action.</param>
            <returns>The casted object or null.</returns>
        </member>
        <member name="T:Topics.Radical.Conversions.ConvertExtensions">
            <summary>
            Add behaviors to convert from one type to another.
            </summary>
        </member>
        <member name="M:Topics.Radical.Conversions.ConvertExtensions.AsObservable``1(``0)">
            <summary>
            Returns the source value as a generic observable object.
            </summary>
            <typeparam name="T">The type of the source value.</typeparam>
            <param name="value">The source value.</param>
            <returns>The observable instance that wraps the source value.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.ConvertExtensions.ToInt32(System.String)">
            <summary>
            Convertrs the source string value to a boolean.
            </summary>
            <param name="value">The source value.</param>
            <returns>A boolean rapresentation of the source string.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.ConvertExtensions.ToBoolean(System.String)">
            <summary>
            Converts the source string value to a boolean.
            </summary>
            <param name="value">The source value.</param>
            <returns>A boolean rapresentation of the source string.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.ConvertExtensions.ToDecimal(System.String)">
            <summary>
            Converts the source string value to a decimal.
            </summary>
            <param name="value">The source value.</param>
            <returns>A decimal rapresentation of the source string.</returns>
        </member>
        <member name="M:Topics.Radical.Conversions.ConvertExtensions.ToDecimal(System.Double)">
            <summary>
            Casts the source double value to a decimal.
            </summary>
            <param name="value">The source value.</param>
            <returns>A decimal rapresentation of the source double.</returns>
        </member>
        <member name="T:Topics.Radical.DateTimeExtensions">
            <summary>
            Adds behaviors to the <c>DateTime</c> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.DateTimeExtensions.ToEndOfMonth(System.DateTime)">
            <summary>
            Returns a new DateTime representing the last day of source date month.
            </summary>
            <param name="source">The source.</param>
            <returns>A new DateTime representing the last day of source date month.</returns>
        </member>
        <member name="T:Topics.Radical.EnumExtensions">
            <summary>
            Helper class that adds functionalities for enumerative types.
            </summary>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.EnsureIsDefined(System.Enum)">
            <summary>
            Calls FCL Enum.IsDefined and if the result is false throws
            an ArgumentException.
            </summary>
            <exception cref="T:System.ArgumentException">If FCL Enum.IsDefined returns false</exception>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.IsDefined(System.Enum)">
            <summary>
            Calls FCL Enum.IsDefined and returns the result.
            </summary>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.IsDescriptionAttributeDefined(System.Enum)">
            <summary>
            Determines whether <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> is defined on the specified value.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            	<c>true</c> if is the attribute is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.GetDescriptionAttribute(System.Enum)">
            <summary>
            Gets the description attribute applied on the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/>.</returns>
            <exception cref="T:System.ArgumentException">No <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> has been defined on the given enum value.</exception>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.TryGetDescriptionAttribute(System.Enum,Topics.Radical.EnumItemDescriptionAttribute@)">
            <summary>
            Gets the description string holded by the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> applied to the given enumaration value.
            </summary>
            <param name="value">The enumeration value to search the attribute on.</param>
            <param name="attribute">The <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> applied to given enumeration value.</param>
            <returns><c>True</c> if the operation has been successfully completed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.GetCaption(System.Enum)">
            <summary>
            Gets the caption string holded by the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> 
            applied to the given enumaration value.
            </summary>
            <param name="value">The value to extract caption from.</param>
            <returns>The value applied to the <c>Caption</c> property of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/>.</returns>
            <exception cref="T:System.ArgumentException">No <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> has been defined on the given enum value.</exception>
        </member>
        <member name="M:Topics.Radical.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description string holded by the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> 
            applied to the given enumaration value.
            </summary>
            <param name="value">The value to extract description from.</param>
            <returns>The value applied to the <c>Description</c> property of the <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/>.</returns>
            <exception cref="T:System.ArgumentException">No <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/> has been defined on the given enum value.</exception>
        </member>
        <member name="T:Topics.Radical.IServiceProviderExtensions">
            <summary>
            Extension methods for IServiceProvider
            </summary>
        </member>
        <member name="M:Topics.Radical.IServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.IServiceProviderExtensions.GetService``2(System.IServiceProvider)">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="SInterface">The type of the interface.</typeparam>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.IServiceProviderExtensions.TryGetService``1(System.IServiceProvider)">
            <summary>
            Tries to the get service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.IServiceProviderExtensions.TryGetService``2(System.IServiceProvider)">
            <summary>
            Tries to the get service.
            </summary>
            <typeparam name="SInterface">The type of the interface.</typeparam>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="T:Topics.Radical.Linq.EnumerableExtensions">
            <summary>
            Adds behaviors to the generic <c>IEnumerable</c> interface.
            </summary>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.ToFlat``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the given source tree in a flat list.
            </summary>
            <typeparam name="T">The type of the source items.</typeparam>
            <param name="root">The root.</param>
            <param name="childrenGetter">The delegate to retrieve the children of a given node.</param>
            <returns>
            A flat readonly list of all the items in the source tree.
            </returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.ToFlat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the given source tree in a flat list.
            </summary>
            <typeparam name="T">The type of the source items.</typeparam>
            <param name="source">The source tree.</param>
            <param name="childrenGetter">The delegate to retrieve the children of a given node.</param>
            <returns>A flat readonly list of all the items in the source tree.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.FindNodes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Finds all the nodes in the given source tree that satisfies the given condition.
            </summary>
            <typeparam name="T">The type of the item in the source tree.</typeparam>
            <param name="source">The source tree..</param>
            <param name="childrenGetter">The delegate to retrieve the children of a given node.</param>
            <param name="condition">The condition to usa as filter.</param>
            <returns>A flat readonly list of all the items in the source tree that mets the given condition.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.IsChildOfAny``1(``0,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Determines whether the current tree item is child of any of the given items list.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">The item.</param>
            <param name="parents">The flat parent list.</param>
            <param name="parentGetter">A predicate to retrieve the parent of the current item.</param>
            <returns>
            	<c>true</c> if tha item is child of any of the items in the given items list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.IsChildOfAny``1(``0,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Determines whether the current tree item is child of any of the given items list.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">The item.</param>
            <param name="parents">The flat parent list.</param>
            <param name="parentGetter">A delegate to retrieve the parent of the current item.</param>
            <param name="comparer">A delegate used to compare items for equality.</param>
            <returns>
            	<c>true</c> if tha item is child of any of the items in the given items list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.IsChildOfAny``1(``0,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the current tree item is child of any of the given items list.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">The item.</param>
            <param name="parents">The flat parent list.</param>
            <param name="parentGetter">A delegate to retrieve the parent of the current item.</param>
            <param name="comparer">An equality comparer used to compare items for equality.</param>
            <returns>
            	<c>true</c> if tha item is child of any of the items in the given items list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified Action to every item in the enumeration.
            </summary>
            <typeparam name="T">The type of the elements of the enumeration.</typeparam>
            <param name="list">The enumeration to enumerate on.</param>
            <param name="action">The action to apply/execute.</param>
            <returns>The source enumeration.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Executes the specified Func for each item in the enumeration 
            passing throught the given state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="T">The type of the elements of the enumeration.</typeparam>
            <param name="list">The enumeration to enumerate on.</param>
            <param name="initialState">The initial state.</param>
            <param name="func">The Func to invoke for each element.</param>
            <returns>The source enumeration.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.Enumerate(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Applies the specified Action to every item in the enumeration.
            </summary>
            <param name="list">The enumeration to enumerate.</param>
            <param name="action">The action to apply/execute.</param>
            <returns>The source list for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a read only copy of the given source list.
            </summary>
            <typeparam name="T">The type of item of the list.</typeparam>
            <param name="list">The source list.</param>
            <returns>A new read only <c>IEnumerable</c> containing the same items of the source list.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.Any(System.Collections.IEnumerable)">
            <summary>
            Determines if the sequence contains elements.
            </summary>
            <param name="source">The source sequence.</param>
            <returns><c>True</c> if the sequence contains elements; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the sequence contains no elements.
            </summary>
            <typeparam name="T">The type of the sequence source item.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            	<c>True</c> if the sequence contains no elements; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.None(System.Collections.IEnumerable)">
            <summary>
            Determines if the sequence contains no elements.
            </summary>
            <param name="source">The source sequence.</param>
            <returns><c>True</c> if the sequence contains no elements; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.AlternateWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Alternates the source list with the suplied separator instance.
            </summary>
            <typeparam name="T">The type of the list item.</typeparam>
            <param name="items">The source items list.</param>
            <param name="separator">The separator.</param>
            <returns>The new list with inserted the separator.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.EnumerableExtensions.Shouffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shouffles the items in the source list in a random order.
            </summary>
            <typeparam name="T">The type of the item in the source list.</typeparam>
            <param name="items">The items.</param>
            <returns>A new list ordered in a random manner.</returns>
        </member>
        <member name="T:Topics.Radical.Linq.ExpressionExtensions">
            <summary>
            Extends the expression class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Linq.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of the member.
            </summary>
            <typeparam name="T">The member type.</typeparam>
            <param name="source">The source expression that represents the member.</param>
            <returns>The name of the member.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the member.
            </summary>
            <typeparam name="T">The type of object that expose the member.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <returns>The name of the member.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.ListExtensions.Sync``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Syncs the specified source list with the given destination list.
            The sync direction is from source to destination.
            </summary>
            <typeparam name="T">The trype of the list item.</typeparam>
            <param name="source">The source list.</param>
            <param name="destination">The destination list.</param>
            <returns>A reference to the destination list.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.QueryableExtensions.Fill``2(System.Linq.IQueryable{``0},Topics.Radical.ComponentModel.IEntityCollection{``1},System.Func{``0,``1})">
            <summary>
            Fills the specified destination collection using data coming from the given source
            and adapting the source data to the destination format using the speficied adapter
            delegate.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDest">The type of the destination.</typeparam>
            <param name="source">The source data.</param>
            <param name="destination">The destination container.</param>
            <param name="adapter">The adapter.</param>
            <returns>The a reference to the supplied destination container to allow fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Linq.QueryableExtensions.Fill``2(System.Linq.IQueryable{``0},Topics.Radical.ComponentModel.IEntityCollection{``1},System.Func{``0,Topics.Radical.ComponentModel.IEntityCollection{``1},``1})">
            <summary>
            Fills the specified destination collection using data coming from the given source
            and adapting the source data to the destination format using the speficied adapter
            delegate.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDest">The type of the destination.</typeparam>
            <param name="source">The source data.</param>
            <param name="destination">The destination container.</param>
            <param name="adapter">The adapter.</param>
            <returns>
            The a reference to the supplied destination container to allow fluent interface usage.
            </returns>
        </member>
        <member name="T:Topics.Radical.Linq.SelectorExtensions">
            <summary>
            Add behaviors to the IEnumerable<paramref name="T"/> interface.
            </summary>
        </member>
        <member name="M:Topics.Radical.Linq.SelectorExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <param name="defaultValue">A function to return the default value.</param>
            <returns>
            The value provided by the given Func<paramref name="T"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> or <paramref name="defaultValue"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Topics.Radical.Linq.SelectorExtensions.SingleOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>
            Returns the only element of a sequence or a default value if no elements exists; this method throws an exception if the list contains more than one element.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">A function to return the default value.</param>
            <returns>
            The single element of the input sequence, or Func<paramref name="T"/> if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> or <paramref name="defaultValue"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate"/>.</exception>
        </member>
        <member name="T:Topics.Radical.NullableExtensions">
            <summary>
            Adds behaviors to the Generic <c>Nullable</c> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.NullableExtensions.ValueOr``1(System.Nullable{``0},``0)">
            <summary>
            If the input value is null returns the supplied default value.
            </summary>
            <typeparam name="T">The type of the Nullable type.</typeparam>
            <param name="value">The value to test.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The input value, if not null, otherwise the supplied default value.
            </returns>
        </member>
        <member name="M:Topics.Radical.NullableExtensions.ValueOr``1(System.Nullable{``0},``0,System.Func{``0,``0})">
            <summary>
            If the input value is null returns the supplied default value.
            </summary>
            <typeparam name="T">The type of the Nullable type.</typeparam>
            <param name="value">The value to test.</param>
            <param name="defaultValue">The default value.</param>
            <param name="ifValue">A delegate that will be invoked, if the supplied nullable 
            value has a value, in order to give the caller an opportunity to customize the return value;
            if this delegate is null the value of the nullable type is returned, otherwise is returned
            the return value of the supplied delegate.</param>
            <returns>
            The input value, if not null, otherwise the supplied default value.
            </returns>
        </member>
        <member name="T:Topics.Radical.NumbersExtensions">
            <summary>
            Adds behaviors for numeric types.
            </summary>
        </member>
        <member name="M:Topics.Radical.NumbersExtensions.IsEven(System.Int32)">
            <summary>
            Determines whether the specified value is even.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is even; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Topics.Radical.ObjectExtensions">
            <summary>
            Adds behaviors to the base object class.
            </summary>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.Intercept``1(``0,System.Action{``0})">
            <summary>
            Exposes the specified object in order to provide a fluent interface
            based access to objects that does not support fluent interfaces.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The current object.</param>
            <param name="interceptor">The delagate used to intercept the exposition.</param>
            <returns>The originally exposed object.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.InterceptAs``2(``0,System.Action{``1})">
            <summary>
            Exposes the specified object, trying to cast it to the destination type,
            in order to provide a fluent interface based access to objects that does 
            not support fluent interfaces.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="obj">The current object.</param>
            <param name="interceptor">The delagate used to intercept the exposition.</param>
            <returns>The originally exposed object.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.IfNotNullDo``1(``0,System.Action{``0})">
            <summary>
            Executes the given action is the source object is not null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="obj">The source object.</param>
            <param name="action">The action to execute.</param>
            <returns>The source object instance.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.IfNullDo``1(``0,System.Action)">
            <summary>
            Executes the given action is the source object is null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="obj">The source object.</param>
            <param name="action">The action to execute.</param>
            <returns>The source object instance.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.If``1(``0,System.Predicate{``0},System.Action{``0})">
            <summary>
            Executes the supplied delegate only if the given predicate returns true.
            </summary>
            <typeparam name="T">The type of the intercepted object.</typeparam>
            <param name="obj">The current intercepted object.</param>
            <param name="condition">The condition to evaluate.</param>
            <param name="thenAction">The action if the condition evaluates to true.</param>
            <returns>The intercepted object.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.If``1(``0,System.Predicate{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Executes the supplied delegates based on the evaluation of the given predicate.
            </summary>
            <typeparam name="T">The type of the intercepted object.</typeparam>
            <param name="obj">The current intercepted object.</param>
            <param name="condition">The condition to evaluate.</param>
            <param name="thenAction">The action if the condition evaluates to true.</param>
            <param name="elseAction">The action if the condition evaluates to false.</param>
            <returns>The intercepted object.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.Return``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
            Compares the input value against null (ReferenceEquals), if the supplied value is not null returns
            the value using the specified evaluator otherwise the one provided by the supplied default value func.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input value.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="defaultValueOnNullInput">The default value on null input.</param>
            <returns>
            The evaluated input value; otherwise, if the imput value reference equals null, returns the default value.
            </returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.Return``2(``0,System.Func{``0,``1},System.Func{``1},System.Predicate{``0})">
            <summary>
            Evaluates the given input value using the supplied failure evaluator 
            and returns the value using the specified evaluator or the one provided by the
            supplied failure value.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input value.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="failureValue">The failure value.</param>
            <param name="failureEvaluator">The failure evaluator.</param>
            <returns>The evaluated input value; otherwise, if the failure evaluator failes, return the failure value.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.Do``1(``0,System.Action{``0})">
            <summary>
            Executes the specified action if the input value is not null (ReferenceEquals).
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="input">The input value.</param>
            <param name="action">The action to execute.</param>
            <returns>The input value.</returns>
        </member>
        <member name="M:Topics.Radical.ObjectExtensions.Do``1(``0,System.Predicate{``0},System.Action{``0})">
            <summary>
            Executes the specified action if the supplied failure evaluator
            evaluates to false.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="input">The input value.</param>
            <param name="failureEvaluator">The failure evaluator.</param>
            <param name="action">The action to execute.</param>
            <returns>
            The input value.
            </returns>
        </member>
        <member name="T:Topics.Radical.Reflection.GetAssembly">
            <summary>
            Entry point for accessing assembly types.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.GetAssembly.ThatContains``1">
            <summary>
            Returns a reference to the assembly that contains the gievn type T.
            </summary>
            <typeparam name="T">The type whose assembly reference should be returned.</typeparam>
            <returns>An instance of the assembly containing the given type T.</returns>
        </member>
        <member name="T:Topics.Radical.Reflection.AssemblyExtensions">
            <summary>
            Adds behaviors to an assembly class instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.AssemblyExtensions.IsAttributeDefined``1(System.Reflection.Assembly)">
            <summary>
            Determines whether the given attribute is defined on the specified assembly.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if the attribute is defined on the specified assembly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.AssemblyExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes, identified by 
            the given attribute type, applied, at assembly
            level, to the assembly.
            </summary>
            <typeparam name="T">The attribute type to look for.</typeparam>
            <param name="assembly">The assembly to search in.</param>
            <returns>A list of attribute if any; otherwise an empty list.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.AssemblyExtensions.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the attribute at assembly level identified by the 
            given attribute type T.
            </summary>
            <typeparam name="T">The attribute type to look for.</typeparam>
            <param name="assembly">The assembly to search in.</param>
            <returns>The attribute instance.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.AssemblyExtensions.TryGetAttribute``1(System.Reflection.Assembly,``0@)">
            <summary>
            Tries to get the attribute at assembly level identified by the 
            given attribute type T.
            </summary>
            <typeparam name="T">The attribute type to look for.</typeparam>
            <param name="assembly">The assembly to search in.</param>
            <param name="attribute">The attribute used to assign the output refence.</param>
            <returns><c>True</c> if an attribute of the given type can be found; otherwise false.</returns>
        </member>
        <member name="T:Topics.Radical.Reflection.MemberInfoExtensions">
            <summary>
            Defines static methods to manipulates MemberInfo types.
            All methods are also defined as .NET extension methods.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.IsAttributeDefined``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether an attribute is defined on the specified type.
            </summary>
            <typeparam name="T">The type (System.Type) of the attribute to search for.</typeparam>
            <param name="memberInfo">The MemberInfo to invastigate.</param>
            <returns>
            	<c>true</c> if the attribute is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.IsAttributeDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether an attribute is defined on the specified type.
            </summary>
            <typeparam name="T">The type (System.Type) of the attribute to search for.</typeparam>
            <param name="memberInfo">The MemberInfo to invastigate.</param>
            <param name="inherit">if set to <c>true</c> the search is propagated to the inheritance chain, otherwise the attribute is searched only in the given type.</param>
            <returns>
            	<c>true</c> if the attribute is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Extracts the attributes applied to the specified System.Type.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The MemberInfo to search on.</param>
            <returns>An array of the found attributes.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Extracts the attributes from the specified System.Type.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The MemberInfo to search on.</param>
            <param name="inherit"><c>true</c> to search the inheritance chain.</param>
            <returns>An array of the found attributes.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Extracts the first attribute applied to the specified System.Type.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The MemberInfo to search on.</param>
            <returns>
            An instance of the found attribute, if one, otherwise null.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Extracts the first attribute applied to the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The MemberInfo to search on.</param>
            <param name="inherit"><c>true</c> to search the inheritance chain.</param>
            <returns>
            An instance of the found attribute, if one, otherwise null.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MemberInfoExtensions.TryGetAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Tries to extracts the first attribute applied to the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The MemberInfo to search on.</param>
            <param name="attribute">An instance of the found attribute, if one, otherwise null.</param>
            <returns>
            <c>True</c> if an attribute of the given type can be found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Reflection.LateBoundVoidMethod">
            <summary>
            Represents a fast delegate to a void method call.
            </summary>
        </member>
        <member name="T:Topics.Radical.Reflection.LateBoundMethod">
            <summary>
            Represents a fast delegate to a method call.
            </summary>
        </member>
        <member name="T:Topics.Radical.Reflection.MethodInfoExtensions">
            <summary>
            Adds behaviors to the <see cref="T:System.Reflection.MethodInfo"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.MethodInfoExtensions.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>
            Creates a late bound fast delegate using lambda expression for a method
            with a return type.
            </summary>
            <param name="method">The method to create the fast delegate for.</param>
            <returns>A reference to the created fast delegate.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.MethodInfoExtensions.CreateVoidDelegate(System.Reflection.MethodInfo)">
            <summary>
            Creates a late bound fast delegate using lambda expression for a method
            with a 'void' return type.
            </summary>
            <param name="method">The method to create the fast delegate for.</param>
            <returns>A reference to the created fast delegate.</returns>
        </member>
        <member name="T:Topics.Radical.Reflection.Function">
            <summary>
            Defines a delegate.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <returns>A value of type T.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.ObjectExtensions.CreateFastPropertyGetter``1(System.Object,System.String)">
            <summary>
            Creates a fast property getter.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="target">The target instance that expose the property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A delgate to get the property value.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.ObjectExtensions.CreateFastPropertyGetter``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a fast property getter.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="target">The target instance that expose the property.</param>
            <param name="property">The property.</param>
            <returns>
            A delgate to get the property value.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.ObjectExtensions.CreateFastPropertyGetter(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a fast property getter.
            </summary>
            <param name="target">The target instance that expose the property.</param>
            <param name="property">The property.</param>
            <returns>
            A delgate to get the property value.
            </returns>
        </member>
        <member name="T:Topics.Radical.Reflection.ParameterInfoExtension">
            <summary>
            Defines static methods to manipulates ParameterInfo types.
            All methods are also defined as .NET extension methods.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.ParameterInfoExtension.IsAttributeDefined``1(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether an attribute is defined on the specified type.
            </summary>
            <typeparam name="T">The type (System.Type) of the attribute to search for.</typeparam>
            <param name="memberInfo">The ParameterInfo to invastigate.</param>
            <returns>
            	<c>true</c> if the attribute is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.ParameterInfoExtension.GetAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Extracts the attributes from the specified System.Type.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The ParameterInfo to search on.</param>
            <returns>An array of the found attributes.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.ParameterInfoExtension.GetAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Extracts the first attribute applied to the specified System.Type.
            </summary>
            <typeparam name="T">The attribute to search for</typeparam>
            <param name="memberInfo">The ParameterInfo to search on.</param>
            <returns>
            An instance of the found attribute, if one, otherwise null.
            </returns>
        </member>
        <member name="T:Topics.Radical.Reflection.TypeExtensions">
            <summary>
            Defines static methods to manipulates System.Type types.
            All methods are also defined as .NET extension methods.
            </summary>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.ToString(System.Type,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            Use 's' for ShortString, 'sn' for ShortNameString.
            </summary>
            <param name="type">The type.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.ToShortString(System.Type)">
            <summary>
            Returns a string rapresentation of the given System.Type composed 
            only by the type name (including the namespace) and the assembly name.
            The built string is compatible with a .net fully qualified type name
            </summary>
            <param name="type">The type to build the string for.</param>
            <returns>A string representing the given type.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.ToShortNameString(System.Type)">
            <summary>
            Returns a string rapresentating the name of the given
            System.Type (without namespaces).
            </summary>
            <param name="type">The type to build the string for.</param>
            <returns>A string representing the name of the given type.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.Is``1(System.Type)">
            <summary>
            Determines whether the specified type is a descendant of the given T type.
            This generic method is a shortcut for the Type.IsAssignableFrom( Type )
            method.
            </summary>
            <typeparam name="T">The supposed base type.</typeparam>
            <param name="type">The type to inspect.</param>
            <returns>
            	<c>true</c> if the specified type inherits from the T type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.Is(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is a descendant of the given other type.
            This generic method is a shortcut for the Type.IsAssignableFrom( Type )
            method.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="otherType">Type of the other.</param>
            <returns>
            	<c>true</c> if the specified type inherits from the other type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.GetInheritanceChain(System.Type)">
            <summary>
            Gets the inheritance chain of the given type.
            </summary>
            <param name="type">The type to search the inheritance chain.</param>
            <returns>The inheritance chain of the given type.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.GetInheritanceChain(System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Gets the inheritance chain of the given type.
            </summary>
            <param name="type">The type to search the inheritance chain.</param>
            <param name="breakIf">A delegate that determinse whento stop the base type lookup.</param>
            <returns>The inheritance chain of the given type.</returns>
        </member>
        <member name="M:Topics.Radical.Reflection.TypeExtensions.GetDescendants(System.Type)">
            <summary>
            Gets all the type that inherits from the given type and are defined in the same assembly.
            </summary>
            <param name="type">The type.</param>
            <returns>A list of descendant types.</returns>
        </member>
        <member name="T:Topics.Radical.StringExtensions">
            <summary>
            Adds behaviors to the <c>String</c> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.StringExtensions.IsLike(System.String,System.String)">
            <summary>
            Performs a case insensitive like compare using the specified compare pattern.
            </summary>
            <param name="value">The source value to compare against the pattern.</param>
            <param name="pattern">The pattern to use as search pattern.</param>
            <returns><c>True</c> in case of successful match, otherwise <c>false</c>.</returns>
            <remarks>The default IsLike is performed using a case insensitive search.</remarks>
        </member>
        <member name="M:Topics.Radical.StringExtensions.IsLike(System.String,System.String[])">
            <summary>
            Performs a case insensitive like compare using the specified compare patterns.
            </summary>
            <param name="value">The source value to compare against the pattern.</param>
            <param name="patterns">The patterns to use as search pattern.</param>
            <returns>
            	<c>True</c> in case of successful match, otherwise <c>false</c>.
            </returns>
            <remarks>The default IsLike is performed using a case insensitive search.</remarks>
        </member>
        <member name="M:Topics.Radical.StringExtensions.IsLike(System.String,System.String,System.Boolean)">
            <summary>
            Performs a Like compare using the specified compare pattern.
            </summary>
            <param name="value">The source value to compare against the pattern.</param>
            <param name="pattern">The pattern to use a a search pattern.</param>
            <param name="ignoreCase"><c>True</c> to perform a case insensitive search, otherwise <c>false</c>.</param>
            <returns>
            	<c>True</c> in cas of successful match, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.Append(System.String,System.String)">
            <summary>
            Appends the specified text to the current string value.
            </summary>
            <param name="value">The current string value.</param>
            <param name="text">The text to append.</param>
            <returns>A new string composed by the source value with the given text appended at the end.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.ValueOr(System.String,System.String)">
            <summary>
            If the input string is null returns the supplied default value.
            </summary>
            <param name="value">The value to test.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The input string, if not null, otherwise the supplied default value.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.ValueOr(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            If the input string is null returns the supplied default value.
            </summary>
            <param name="value">The value to test.</param>
            <param name="defaultValue">The default value.</param>
            <param name="ifValue">A delegate that will be invoked, if the supplied value is not null, in 
            order to give the caller an opportunity to customize the return value; if this delegate is null 
            the incoming value is returned, otherwise is returned the return value of the supplied delegate.</param>
            <returns>
            The input string, if not null, otherwise the supplied default value.
            </returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.ValueOrEmpty(System.String)">
            <summary>
            If the input string is null returns an empty string.
            </summary>
            <param name="value">The value to test.</param>
            <returns>The input string, if not null, otherwise an empty string.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.IfNullOrEmptyReturn(System.String,System.String)">
            <summary>
            If the given string is null or empty returns the supplied default value.
            </summary>
            <param name="value">The value to test against.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The supplied value or default if the supplied one is null or empty.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.ValueOrEmpty(System.String,System.Func{System.String,System.String})">
            <summary>
            If the input string is null returns an empty string.
            </summary>
            <param name="value">The value to test.</param>
            <param name="ifValue">A delegate that will be invoked, if the supplied value is not null, in 
            order to give the caller an opportunity to customize the return value; if this delegate is null 
            the incoming value is returned, otherwise is returned the return value of the supplied delegate.</param>
            <returns>
            The input string, if not null, otherwise an empty string.
            </returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified System.String object is null or an System.String.Empty string.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            	<c>true</c> if is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.AsKeywords(System.String,System.Char[])">
            <summary>
            Splits the given source string using the supplied chars returning a list of
            distinct values.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="separators">The char separators.</param>
            <returns>A distinct list of string spliited by the given chars.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.AsKeywords(System.String,System.Boolean,System.Char[])">
            <summary>
            Splits the given source string using the supplied chars returning a list of
            distinct values.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="applyWildChardsIfNecessary">if set to <c>true</c> [apply wild chards if necessary].</param>
            <param name="separators">The char separators.</param>
            <returns>
            A distinct list of string spliited by the given chars.
            </returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.AsPackUri(System.String)">
            <summary>
            Returns the relative uri formatted as a pack uri: pack://.
            </summary>
            <param name="resourceRelativeUri">The resource relative URI.</param>
            <returns>The pack uri.</returns>
        </member>
        <member name="M:Topics.Radical.StringExtensions.AsPackUri(System.String,System.String)">
            <summary>
            Returns the relative uri formatted as a pack uri: pack://.
            </summary>
            <param name="resourceRelativeUri">The resource relative URI.</param>
            <param name="assemblyName">Name of the assembly containing the resource.</param>
            <returns>The pack uri.</returns>
        </member>
        <member name="T:Topics.Radical.ActionTextWriter">
            <summary>
            Represents a writer that can write a sequential series of characters using an 
            Action delegate ad the destination.
            </summary>
        </member>
        <member name="M:Topics.Radical.ActionTextWriter.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ActionTextWriter"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Topics.Radical.ActionTextWriter.#ctor(System.Action{System.String},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ActionTextWriter"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Topics.Radical.ActionTextWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Topics.Radical.ActionTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentException">
            The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="buffer"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="P:Topics.Radical.ActionTextWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>
            The Encoding in which the output is written.
            </returns>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLine.GetCurrent">
            <summary>
            Gets the current command line instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLine.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Helpers.CommandLine"/> class.
            </summary>
            <param name="args">The current command line args.</param>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLine.Normalize(System.String)">
            <summary>
            Given a command line argument removes leading / or -, and if any,
            removes the argument value.
            </summary>
            <param name="fullArgument">The full argument.</param>
            <returns>Just the argument key.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLine.Contains(System.String)">
            <summary>
            Determines whether the current command contains the specified argument.
            </summary>
            <param name="arg">The argument to search for.</param>
            <returns>
            	<c>true</c> if the current command contains the specified argument; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLine.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to safely get a value given the argument name of 
            a key/value command line argument.
            </summary>
            <typeparam name="T">The expected type of the argument value</typeparam>
            <param name="arg">The argument name.</param>
            <param name="value">The current argument value.</param>
            <returns><c>True</c> if the operation succeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Topics.Radical.Helpers.CommandLineArgumentAttribute">
            <summary>
            Defines the command line argument name associated to a property.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.CommandLineArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Helpers.CommandLineArgumentAttribute"/> class.
            </summary>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="P:Topics.Radical.Helpers.CommandLineArgumentAttribute.ArgumentName">
            <summary>
            Gets the name of the argument.
            </summary>
            <value>
            The name of the argument.
            </value>
        </member>
        <member name="P:Topics.Radical.Helpers.CommandLineArgumentAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether this command line argument is required.
            </summary>
            <value>
            	<c>true</c> if this command line argument is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Helpers.CommandLineArgumentAttribute.Aliases">
            <summary>
            Gets or sets the aliases.
            </summary>
            <value>
            The aliases.
            </value>
        </member>
        <member name="T:Topics.Radical.DelegateComparer`1">
            <summary>
            Implements the generic IComparer in roder to 
            forward comparison to a external delegate.
            </summary>
            <typeparam name="T">The type of the item to compare.</typeparam>
        </member>
        <member name="M:Topics.Radical.DelegateComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DelegateComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Topics.Radical.DelegateComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.DelegateEqualityComparer`1">
            <summary>
            Inherits the generic EqualityComparer in order to 
            forward the comparison to the supplied delegates.
            </summary>
            <typeparam name="T">The type of the item to compare.</typeparam>
        </member>
        <member name="M:Topics.Radical.DelegateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.DelegateEqualityComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="hashCodeFunc">The hash code func.</param>
        </member>
        <member name="M:Topics.Radical.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <para name="T"/> are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="T:Topics.Radical.Helpers.EnumHelper">
            <summary>
            Helper class for enumeration types.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.EnumHelper.ExtractDescriptions``1">
            <summary>
            Given an enuration type, where enuration items are marked with a <see cref="T:Topics.Radical.EnumItemDescriptionAttribute"/>,
            extracts descriptions.
            </summary>
            <returns>A readonly list of strings that represents descriptions data.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.EnumHelper.ExtractBindingData``1">
            <summary>
            Extracts the binding data from the supplied enum type.
            </summary>
            <returns>An readonly list of <see cref="T:Topics.Radical.DataBinding.EnumBinder`1"/> objects.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.EnumHelper.GetValues``1">
            <summary>
            Gets all the values of the given enum type.
            </summary>
            <typeparam name="T">The type of the enum to extract values from.</typeparam>
            <returns>The list of enum values.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.EnumHelper.GetValues(System.Type)">
            <summary>
            Gets all the values of the given enum type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>The list of enum values.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.EnumHelper.ExtractBindingData``1(System.Predicate{``0})">
            <summary>
            Extracts the binding data from the supplied enum type.
            </summary>
            <typeparam name="T">The enum type to extract binding data from.</typeparam>
            <param name="filter">The a predicate that can be used to filer extracted data.</param>
            <returns>
            An readonly list of <see cref="!:EnumBinder"/> objects.
            </returns>
        </member>
        <member name="T:Topics.Radical.Helpers.HashCodeBuilder">
            <summary>
            An helper class to generate hash codes based on a value set.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.HashCodeBuilder.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Helpers.HashCodeBuilder"/> class.
            </summary>
            <param name="initialHashCode">The initial hash code.</param>
        </member>
        <member name="M:Topics.Radical.Helpers.HashCodeBuilder.AddObject(System.Object)">
            <summary>
            Adds the given value to the generated has code.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Topics.Radical.Helpers.HashCodeBuilder.CombinedHash32">
            <summary>
            Gets the combined hash as an <c>Int32</c> value.
            </summary>
            <value>The combined hash code.</value>
        </member>
        <member name="P:Topics.Radical.Helpers.HashCodeBuilder.CombinedHash">
            <summary>
            Gets the combined hash code.
            </summary>
            <value>The combined hash code.</value>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.MailAddress">
            <summary>
            Validates an email address
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.Url">
            <summary>
            validates an url, http, https or ftp.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.Visa">
            <summary>
            All Visa card numbers start with a 4. New cards have 16 digits. Old cards have 13.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.MasterCard">
            <summary>
            All MasterCard numbers start with the numbers 51 through 55. All have 16 digits.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.AmericanExpress">
            <summary>
            American Express card numbers start with 34 or 37 and have 15 digits.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.Diners">
            <summary>
            Diners Club card numbers begin with 300 through 305, 36 or 38. All have 14 digits. There are Diners Club cards that begin with 5 and have 16 digits. These are a joint venture between Diners Club and MasterCard, and should be processed like a MasterCard.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.Discover">
            <summary>
            Discover card numbers begin with 6011 or 65. All have 16 digits.
            </summary>
        </member>
        <member name="F:Topics.Radical.Helpers.KnownRegex.CreditCards.JCB">
            <summary>
            JCB cards beginning with 2131 or 1800 have 15 digits. JCB cards beginning with 35 have 16 digits.
            </summary>
        </member>
        <member name="T:Topics.Radical.Helpers.Password">
            <summary>
            Helper class to manage passwords.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.Password.CreateRandomSalt">
            <summary>
            Creates a random salt.
            </summary>
            <returns>The randomly created salt.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.Password.CreateHash(System.String,System.Byte[])">
            <summary>
            Creates the hash (SHA1) of the given password using the supplied salt.
            </summary>
            <param name="clearTextPassword">The clear text password.</param>
            <param name="passwordSalt">The password salt.</param>
            <returns>The hash of the given password.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.Password.CreateHash(System.String,System.Byte[],System.String)">
            <summary>
            Creates the hash of the given password using the supplied salt.
            </summary>
            <param name="clearTextPassword">The clear text password.</param>
            <param name="passwordSalt">The password salt.</param>
            <param name="hashAlgorithmName">Name of the hash algorithm.</param>
            <returns>
            The hash of the given password.
            </returns>
        </member>
        <member name="T:Topics.Radical.Helpers.RandomStrings">
            <summary>
            An utility class to generate random strings
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.RandomStrings.GenerateRandom">
            <summary>
            Generates a random string using default settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Helpers.RandomStrings.GetCryptographicRandomNumber(System.Int32,System.Int32)">
            <summary>
            Given 2 bound returns a random number between them
            </summary>
            <param name="lBound">The lower bound</param>
            <param name="uBound">The upper bound</param>
            <returns>The random result</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.RandomStrings.GetRandomCharacter">
            <summary>
            Return a random char
            </summary>
            <returns>The choosen char</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.RandomStrings.Next">
            <summary>
            Generates one string based on the defined rules.
            </summary>
            <returns>The generated string.</returns>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.Exclusions">
            <summary>
            A list of char that must be excluded from the
            generated password
            </summary>
            <value>The exclusions.</value>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.MinLenght">
            <summary>
            Minimum char number of the generated password
            </summary>
            <value>The min lenght.</value>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.MaxLenght">
            <summary>
            Maximum char number of the generated password
            </summary>
            <value>The max lenght.</value>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.AllowSymbols">
            <summary>
            Gets or sets a value indicating whether symbols are allowed.
            </summary>
            <value><c>true</c> if symbols are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.AllowRepeatCharacters">
            <summary>
            If true the resulting string can contains
            equals chars.
            </summary>
            <value>
            	<c>true</c> if [allow repeat characters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Helpers.RandomStrings.AllowConsecutiveCharacters">
            <summary>
            If true the resulting string can contains
            consecutive equals chars.
            </summary>
            <value>
            	<c>true</c> if [allow consecutive characters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Helpers.ReflectionHelper">
            <summary>
            Helper class for reflection related stuff.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.BoundTo``1">
            <summary>
            Create an instance of the BoundReflectionHelper class bound the the 
            specified system type.
            </summary>
            <typeparam name="T">The type to bind to.</typeparam>
            <returns>An instance of the BoundReflectionHelper.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property.
            </summary>
            <typeparam name="T">The type of the instance holding the property.</typeparam>
            <param name="propertyRef">The property expressed as a Lambda Expression Function on the given instance type.</param>
            <returns>The name of the property.</returns>
        </member>
        <member name="T:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1">
            <summary>
            A reflection helper specifically bound to a known type.
            </summary>
            <typeparam name="T">The type to bind to.</typeparam>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1.NameOf(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the names the of the given property expressed as Lambda Expression.
            </summary>
            <param name="propertyRef">The property ref.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets property info for the property represented by the given expression.
            </summary>
            <param name="propertyRef">The property expression.</param>
            <returns>The property info.</returns>
        </member>
        <member name="M:Topics.Radical.Helpers.ReflectionHelper.BoundReflectionHelper`1.GetProperties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets property info for the property represented by the given expression.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>
            The list of property info.
            </returns>
        </member>
        <member name="T:Topics.Radical.Transactions.TransactionEnlistmentHelper">
            <summary>
            A simple helper used to enslist a transaction 
            mamager in an existing transaction.
            </summary>
        </member>
        <member name="M:Topics.Radical.Transactions.TransactionEnlistmentHelper.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.Transactions.TransactionEnlistmentHelper"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Transactions.TransactionEnlistmentHelper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><collection>true</collection> to release both managed and unmanaged resources; <collection>false</collection> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Transactions.TransactionEnlistmentHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Transactions.TransactionEnlistmentHelper.EnlistInTransaction(System.Boolean,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
            <summary>
            Enlists the supplied transaction manager in the current transaction.
            </summary>
            <param name="ensureTransaction">if set to <c>true</c> forces an exception if there are no available transactions.</param>
            <param name="enlistmentNotification">The <c>IEnlistmentNotification</c> instance to enlist in the transaction.</param>
            <param name="options">The transaction enlistment options.</param>
        </member>
        <member name="E:Topics.Radical.Transactions.TransactionEnlistmentHelper.TransactionCompleted">
            <summary>
            Occurs when transaction is completed.
            </summary>
        </member>
        <member name="E:Topics.Radical.Transactions.TransactionEnlistmentHelper.TransactionEnlisted">
            <summary>
            Occurs when the transaction has been successfully enlisted.
            </summary>
        </member>
        <member name="P:Topics.Radical.Transactions.TransactionEnlistmentHelper.EnlistedInTransaction">
            <summary>
            Gets a value indicating whether the transaction manager is enlisted in a transaction.
            </summary>
            <value>
            	<c>true</c> if enlisted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Key`1">
            <summary>
            A concrete implemantation of the <see cref="T:Topics.Radical.ComponentModel.IKey"/> interface.
            </summary>
            <typeparam name="T">The System.Type of the data of this key value.</typeparam>
        </member>
        <member name="T:Topics.Radical.Key">
            <summary>
            The <c>Key</c> class is an abstraction of a primary key.
            </summary>
        </member>
        <member name="M:Topics.Radical.Key.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Topics.Radical.Key.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key.Equals(Topics.Radical.ComponentModel.IKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Key`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Key`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Key`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Key`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key`1.op_Implicit(`0)~Topics.Radical.Key{`0}">
            <summary>
            Performs an implicit conversion from T to <see cref="T:Topics.Radical.Key`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Topics.Radical.Key`1.op_Implicit(Topics.Radical.Key{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Topics.Radical.Key`1"/> to T.
            </summary>
            <param name="pk">The pk.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Topics.Radical.Key`1.op_Equality(Topics.Radical.Key{`0},Topics.Radical.Key{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="pk1">The PK1.</param>
            <param name="pk2">The PK2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Topics.Radical.Key`1.op_Inequality(Topics.Radical.Key{`0},Topics.Radical.Key{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="pk1">The PK1.</param>
            <param name="pk2">The PK2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Topics.Radical.Key`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Topics.Radical.Key`1.Equals(Topics.Radical.ComponentModel.IKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key`1.Equals(Topics.Radical.ComponentModel.IKey{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key`1.Equals(Topics.Radical.ComponentModel.IKey{`0},Topics.Radical.ComponentModel.IKey{`0})">
            <summary>
            Determines if the suppplied keys represents the same values.
            </summary>
            <param name="leftValue">The right side key value.</param>
            <param name="rightValue">The left side key value.</param>
            <returns><c>True</c> if the two instances are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Key`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Key`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Topics.Radical.Key`1.CompareTo(Topics.Radical.ComponentModel.IKey{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="P:Topics.Radical.Key`1.Value">
            <summary>
            Gets real value holded by this instance.
            </summary>
            <value>The value of the primary key.</value>
        </member>
        <member name="T:Topics.Radical.InvalidKeyFormatException">
            <summary>
            Exception raised during the conversion to an <c>IKey</c> instance when the
            supplied data does not represents a valid <c>IKey</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.InvalidKeyFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.InvalidKeyFormatException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Topics.Radical.InvalidKeyFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.InvalidKeyFormatException"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.InvalidKeyFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.InvalidKeyFormatException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.InvalidKeyFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.InvalidKeyFormatException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Topics.Radical.Messaging.AbstractMessageHandler`1">
            <summary>
            A base implementation of the IHandleMessage generic interface.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
        </member>
        <member name="M:Topics.Radical.Messaging.AbstractMessageHandler`1.Handle(System.Object,`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.AbstractMessageHandler`1.Handle(System.Object,System.Object)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.AbstractMessageHandler`1.ShouldHandle(System.Object,System.Object)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <returns>
              <c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Messaging.AbstractMessageHandler`1.OnShouldHandle(System.Object,`0)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <returns>
              <c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Messaging.Message">
            <summary>
            A concrete message.
            </summary>
        </member>
        <member name="M:Topics.Radical.Messaging.Message.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Messaging.Message"/> class.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="P:Topics.Radical.Messaging.Message.Sender">
            <summary>
            Gets the message sender.
            </summary>
            <value>The message sender.</value>
        </member>
        <member name="T:Topics.Radical.Messaging.MessageBroker">
            <summary>
            A message broker is a mediator used to dispatch and 
            broadcast messages to all the subscribers in the system.
            </summary>
        </member>
        <member name="F:Topics.Radical.Messaging.MessageBroker.msgSubsIndex">
            <summary>
            A dictionary, of all the subscriptions, whose key is the message type
            and whose value is the list of Subscriptions for that message type
            </summary>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.#ctor(Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Messaging.MessageBroker"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.#ctor(Topics.Radical.ComponentModel.IDispatcher,System.Threading.Tasks.TaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Messaging.MessageBroker"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe``1(System.Object,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe``1(System.Object,System.Object,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the 
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender filter.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe(System.Object,System.Type,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="messageType">Type of the message.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe(System.Object,System.Object,System.Type,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe``1(System.Object,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe(System.Object,System.Type,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="messageType">Type of the message.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe(System.Object,System.Object,System.Type,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{Topics.Radical.ComponentModel.Messaging.IMessage})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback to invoke in order to notify the message arrival.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Subscribe``1(System.Object,System.Object,Topics.Radical.ComponentModel.Messaging.InvocationModel,System.Action{``0})">
            <summary>
            Subscribes the given subscriber to notifications of the
            given type of IMessage using the supplied callback only
            if the sender is the specified reference.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender filter.</param>
            <param name="invocationModel">The invocation model.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the subcscriptions.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Unsubscribe(System.Object,System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the messages
            posted by the given sender.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Unsubscribe``1(System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the subcscriptions to the supplied IMessage type.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Unsubscribe``1(System.Object,System.Object)">
            <summary>
            Unsubscribes the specified subscriber from all the messages,
            of the given type T, posted by the given sender.
            </summary>
            <typeparam name="T">The message type filter.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Unsubscribe``1(System.Object,System.Delegate)">
            <summary>
            Unsubscribes the specified subscriber from the subcscription to the supplied IMessage type.
            </summary>
            <typeparam name="T">The type of message the subecriber is interested in.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="callback">The callback to unsubscribe.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Dispatch``1(``0)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for 
            the execution of all the subscribers.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Dispatch(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for
            the execution of all the subscribers.
            </summary>
            <param name="message">The message to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Dispatch(System.Type,Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Dispatches the specified message in a synchronus manner waiting for
            the execution of all the subscribers.
            </summary>
            <param name="messageType">The Type of the message to dispatch.</param>
            <param name="message">The message to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Broadcast``1(``0)">
            <summary>
            Broadcasts the specified message in an asynchronus manner without
            waiting for the execution of the subscribers.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageBroker.Broadcast(System.Type,Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Broadcasts the specified message in an asynchronus manner without
            waiting for the execution of the subscribers.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Topics.Radical.Messaging.MessageHandler`1">
            <summary>
            A base implementation of the IMessageHandler generic interface.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageHandler`1.Handle(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageHandler`1.ShouldHandle(Topics.Radical.ComponentModel.Messaging.IMessage)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="message">The message.</param>
            <returns>
              <c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Messaging.MessageHandler`1.OnShouldHandle(`0)">
            <summary>
            Determines if this message handler is interested in handling the given message.
            </summary>
            <param name="message">The message.</param>
            <returns>
              <c>True</c> if this message handler is interested in handling the given message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Messaging.ISubscription.GetAction">
            <summary>
            Gets a reference to the callback delegate of this subscription.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Messaging.ISubscription.Invoke(System.Object,System.Object)">
            <summary>
            The subscriber invocation model is based on the <see cref="P:Topics.Radical.Messaging.ISubscription.InvocationModel"/> property.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Topics.Radical.Messaging.ISubscription.DirectInvoke(System.Object,System.Object)">
            <summary>
            The subscriber is invoked in the same thread of the dispatcher.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1">
            <summary>
            Identifies an AddRange operation on a collection.
            </summary>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.CollectionChange`2">
            <summary>
            A base, abstract, change class specific for a collection change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionChange`2.#ctor(System.Object,`0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{`0},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.CollectionChange`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.CollectionChange`2.Descriptor">
            <summary>
            Gets the descriptor of this change.
            </summary>
            <value>The descriptor instance.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.AddRangeCollectionChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1">
            <summary>
            Identifies a collection clear change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionClearedChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.CollectionRangeDescriptor`1.Items">
            <summary>
            Gets the range of items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor`1.Item">
            <summary>
            Gets the item involved in the change.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor`1.Index">
            <summary>
            Gets the index of the item.
            </summary>
            <value>The index.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="newIndex">The new index.</param>
            <param name="oldIndex">The old index.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor`1.NewIndex">
            <summary>
            Gets the new index.
            </summary>
            <value>The new index.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor`1.OldIndex">
            <summary>
            Gets the old index.
            </summary>
            <value>The old index.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor`1.#ctor(`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor`1"/> class.
            </summary>
            <param name="newItem">The new item.</param>
            <param name="replacedItem">The replaced item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor`1.ReplacedItem">
            <summary>
            Gets the replaced item.
            </summary>
            <value>The replaced item.</value>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor`1.NewItem">
            <summary>
            Gets the new item.
            </summary>
            <value>The new item.</value>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1">
            <summary>
            Identifies that an item in a collection has been changed.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemChangedCollectionChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1">
            <summary>
            Identifies that an item in a collection has been moved.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.ItemMovedDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemMovedCollectionChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1">
            <summary>
            Identifies that an item in a collection has been removed.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.ItemChangedDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemRemovedCollectionChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1">
            <summary>
            Identifies that an item in a collection has been replaced.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1.#ctor(System.Object,Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor{`0},Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor{`0}},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{Topics.Radical.ChangeTracking.Specialized.ItemReplacedDescriptor{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="rejectCallback">The reject callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1.GetChangedEntities">
            <summary>
            Gets the changed entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.ItemReplacedCollectionChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1">
            <summary>
            Identifies a change specific for a property change.
            </summary>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.#ctor(System.Object,System.String,`0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="restoreCallback">The restore callback.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.#ctor(System.Object,System.String,`0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="restoreCallback">The restore callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.#ctor(System.Object,System.String,`0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{`0},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="restoreCallback">The restore callback.</param>
            <param name="commitCallback">The commit callback.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.GetAdvisedAction(System.Object)">
            <summary>
            Gets the advised action for this IChange.
            </summary>
            <param name="changedItem"></param>
            <returns></returns>
            <value>The advised action.</value>
        </member>
        <member name="M:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.Clone">
            <summary>
            Clones this IChange instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="P:Topics.Radical.ChangeTracking.Specialized.PropertyValueChange`1.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.BeginInit">
            <summary>
            Begins a data load session.
            During a data load session both the notification engine
            and the change tracking system are suspended.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.EndInit">
            <summary>
            Ripristina la generazione degli eventi che la Collection
            scatena alla modifica (aggiunta/rimozione), ripristina
            anche il meccanismo di caching.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.EndInit(System.Boolean)">
            <summary>
            Ends a previously begun data load session optionally
            notifying to the outside world the changes occurred.
            </summary>
            <param name="notify">if set to <c>true</c> raises the <see cref="E:Topics.Radical.Model.EntityCollection`1.CollectionChanged"/> event.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnCollectionChanged(Topics.Radical.ComponentModel.CollectionChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.ComponentModel.CollectionChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="collection">The readonly list to use as source.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="storage">The storage.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnInitialize">
            <summary>
            Called when during the inizialization process,
            override this method to be notified when the default
            ctor has been called.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.WireListItem(`0)">
            <summary>
            Called every time this list needs to wire events of the given items, 
            tipically this method is called every time an item is added to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.UnwireListItem(`0)">
            <summary>
            Called every time this list needs to unwire events of the given items, 
            tipically this method is called every time an item is removed to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnSetValueAt(Topics.Radical.Model.SetValueAtEventArgs{`0})">
            <summary>
            Called just before the set operation.
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.SetValueAtEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.SetValueAt(System.Int32,`0)">
            <summary>
            Sets the item at the given index
            </summary>
            <param name="index">The index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnSetValueAtCompleted(System.Int32,`0,`0)">
            <summary>
            Called just after SetValueAt
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new item.</param>
            <param name="overwrittenValue">The overwritten item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.GetValueAt(System.Int32)">
            <summary>
            Gets the item at the given index
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnAddCompleted(System.Int32,`0)">
            <summary>
            Called just after Add
            </summary>
            <param name="index">The index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Move(`0,System.Int32)">
            <summary>
            Moves the specified item to a new position, identified by the <paramref name="newIndex"/>
            parameter, inside the collection.
            </summary>
            <param name="item">The item to move.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="item"/> to move does not belong to this collection.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied index (<paramref name="newIndex"/>)
            is outside the bounds of the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The supplied <paramref name="item"/> is a null reference.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified item, identified by the <paramref name="oldIndex"/> parameter,
            to a new position, identified by the <paramref name="newIndex"/> parameter, inside
            the collection.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied index (<paramref name="oldIndex"/> or <paramref name="newIndex"/>)
            is outside the bounds of the collection.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnMoveCompleted(System.Int32,System.Int32,`0)">
            <summary>
            Called after the move operation has been completed.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnClearCompleted(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called when clear is completed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the supplied item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnInsert(Topics.Radical.Model.InsertEventArgs{`0})">
            <summary>
            Called just before the Insert
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.InsertEventArgs`1"/> instance containing additional data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the given item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnInsertCompleted(System.Int32,`0)">
            <summary>
            Called just after Insert
            </summary>
            <param name="index">The index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnRemoveCompleted(`0,System.Int32)">
            <summary>
            Called just after Remove
            </summary>
            <param name="value">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Remove(`0,System.Boolean)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="notify">if set to <collection>true</collection> raises the CollectionChanged event.</param>
            <returns>true if the operation has been completed successfully; otherwise false.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.RemoveAt(System.Int32,System.Boolean)">
            <summary>
            Removes at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="notify">if set to <collection>true</collection> raises the CollectionChanged event.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.CopyTo(`0[])">
            <summary>
            Copies the elements of this collection to a T[].
            </summary>
            <param name="array">The one-dimensional T[] that is the destination of the elements copied from collection. The T[] must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is null. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero. </exception>
              
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
              
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Reverse">
            <summary>
            Reverses this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.CreateView">
            <summary>
            Creates a new view.
            </summary>
            <returns>An instance of a view.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnCreateView">
            <summary>
            Called in order to create a new view.
            Overrdie this memeber to customize the creation process.
            </summary>
            <returns>An instance of a view.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnCreatingNew">
            <summary>
            Creates a new instance of the type managed by this collection.
            </summary>
            <returns>
            An instance of the type managed by this collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.CreateNew">
            <summary>
            Creates a new instance of the type managed by this collection.
            </summary>
            <returns>
            An instance of the type managed by this collection.
            </returns>
            <exception cref="T:System.NotSupportedException">The operation is not supported, <see cref="P:Topics.Radical.Model.EntityCollection`1.AllowNew"/> property is set to <collection>false</collection>.</exception>
            <exception cref="T:System.NullReferenceException">The creation process returned a null reference.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnAddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called before the AddRange begins.
            </summary>
            <param name="rangeToAdd">The range to add.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items.
            </summary>
            <param name="list">The range of items ot add.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnAddRangeCompleted(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called when the AddRange is completed.
            </summary>
            <param name="addedRange">The added range.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.ToArray">
            <summary>
            Copies the elements of the EntityCollection to a new array.
            </summary>
            <returns>An array containing copies of the elements of the EntityCollection.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnDisposed">
            <summary>
            Called to raise the Disposed event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.Model.EntityCollection`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><collection>true</collection> to release both managed and unmanaged resources; <collection>false</collection> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="F:Topics.Radical.Model.EntityCollection`1.SerializationKey">
            <summary>
            The serialization key to use during the serialization process.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnDeserialization(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="info">The serailization info.</param>
            <param name="context">The serailization context.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityCollection`1.OnDeserializationCompleted(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when the deserialization process has been completed.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.Events">
            <summary>
            Gets the events.
            </summary>
            <item>The events.</item>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.Storage">
            <summary>
            Gets the internal storage.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is loading data.
            </summary>
            <value>
            	<c>true</c> if this instance is loading data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Topics.Radical.Model.EntityCollection`1.CollectionChanged">
            <summary>
            Occurs when this collection changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:T"/> at the specified index.
            </summary>
            <item></item>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.DefaultView">
            <summary>
            Gets the default view.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.AllowNew">
            <summary>
            Gets a value indicating whether this instance is capable of creating a new instance of the managed type T.
            </summary>
            <item>
            	<collection>true</collection> if this.instace allo the creation of new items; otherwise, <collection>false</collection>.
            </item>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a item indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <item></item>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="E:Topics.Radical.Model.EntityCollection`1.Disposed">
            <summary>
            Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed"/> event of a component.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#ComponentModel#IComponent#Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
            <item></item>
            <returns>The <see cref="T:System.ComponentModel.ISite"/> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a item indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a item indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <item></item>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#ComponentModel#ISite#DesignMode">
            <summary>
            Gets a item indicating whether this component is in design mode or not.
            </summary>
            <item><collection>true</collection> if is in design mode; otherwise, <collection>false</collection>.</item>
        </member>
        <member name="P:Topics.Radical.Model.EntityCollection`1.System#ComponentModel#ISite#Container">
            <summary>
            Gets the container.
            </summary>
            <item>The container.</item>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.BeginInit">
            <summary>
            Begins a data load session.
            During a data load session both the notification engine
            and the change tracking system are suspended.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.EndInit(System.Boolean)">
            <summary>
            Ends a previously begun data load session optionally
            notifying to the outside world the changes occurred.
            </summary>
            <param name="notify">if set to <c>true</c> raises the CollectionChanged event.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="collection">The readonly list to use as source.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityCollection`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnInitialize">
            <summary>
            Called when during the inizialization process,
            override this method to be notified when the default
            ctor has been called.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.WireListItem(`0)">
            <summary>
            Called every time this list needs to wire events of the given items,
            tipically this method is called every time an item is added to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnSetValueAtCompleted(System.Int32,`0,`0)">
            <summary>
            Called just after SetValueAt
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new item.</param>
            <param name="overwrittenValue">The overwritten item.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnAddCompleted(System.Int32,`0)">
            <summary>
            Called just after Add
            </summary>
            <param name="index">The index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnMoveCompleted(System.Int32,System.Int32,`0)">
            <summary>
            Called after the move operation has been completed.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnClearCompleted(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called when clear is completed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnInsertCompleted(System.Int32,`0)">
            <summary>
            Called just after Insert
            </summary>
            <param name="index">The index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnRemoveCompleted(`0,System.Int32)">
            <summary>
            Called just after Remove
            </summary>
            <param name="value">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnDeserialization(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="info">The serailization info.</param>
            <param name="context">The serailization context.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntityCollection`1.OnDeserializationCompleted(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when the deserialization process has been completed.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Topics.Radical.Model.MementoEntityCollection`1.IsTracking">
            <summary>
            Gets a item indicating whether there is an active change tracking service.
            </summary>
            <value>
            	<c>true</c> if there is an active change tracking service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Model.MementoEntityCollection`1.IsCachingSuspended">
            <summary>
            Gets a value indicating whether caching is suspended.
            </summary>
            <value>
            	<c>true</c> if caching is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Topics.Radical.Model.AddingNewEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.AddingNewEventArgs`1"/> class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.AddingNewEventArgs`1.NewItem">
            <summary>
            Gets or sets the new item.
            </summary>
            <item>The new item.</item>
        </member>
        <member name="P:Topics.Radical.Model.AddingNewEventArgs`1.AutoCommit">
            <summary>
            Gets or sets a value indicating whether to 
            automatically call EndNew immidiatly after
            the addition of the new item.
            </summary>
            <value><c>True</c> to auto commit; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.#ctor(Topics.Radical.ComponentModel.IEntityView{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityItemView`1"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="entityItem">The entity item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.Delete">
            <summary>
            Deletes this IEntityItemView and removes if from the view and from the underlying collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemView`1.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.View">
            <summary>
            Gets a reference the view that owns this instance.
            </summary>
            <item>The owner view.</item>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.EntityItem">
            <summary>
            Gets the underlying entity item.
            </summary>
            <item>The underlying entity item.</item>
        </member>
        <member name="E:Topics.Radical.Model.EntityItemView`1.PropertyChanged">
            <summary>
            Occurs when a property item changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <item></item>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.Item(System.String)">
            <summary>
            Gets the error message for the property with the given name.
            </summary>
            <value>The error message for the property. The default is an empty string ("").</value>
        </member>
        <member name="E:Topics.Radical.Model.EntityItemView`1.EditBegun">
            <summary>
            Notifies that an edit operation has begun.
            </summary>
        </member>
        <member name="E:Topics.Radical.Model.EntityItemView`1.EditCanceled">
            <summary>
            Notifies that an edit operation has benn canceled.
            </summary>
        </member>
        <member name="E:Topics.Radical.Model.EntityItemView`1.EditEnded">
            <summary>
            Notifies that an edit operation has ended.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.Topics#Radical#ComponentModel#IEntityItemView#EntityItem">
            <summary>
            Gets the underlying entity item.
            </summary>
            <item>The underlying entity item.</item>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemView`1.Topics#Radical#ComponentModel#IEntityItemView#View">
            <summary>
            Gets a reference the view that owns this instance.
            </summary>
            <item>The owner view.</item>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewSortComparer`1.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityItemViewSortComparer`1"/> class.
            </summary>
            <param name="sortDescriptions">The sort descriptions.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewSortComparer`1.OnCompare(Topics.Radical.ComponentModel.IEntityItemView{`0},Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Compares two objects and returns a item indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewSortComparer`1.Compare(Topics.Radical.ComponentModel.IEntityItemView{`0},Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Compares two objects and returns a item indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityItemViewSortComparer`1.SortDescriptions">
            <summary>
            Gets the sort descriptions.
            </summary>
            <item>The sort descriptions.</item>
        </member>
        <member name="T:Topics.Radical.Model.EntityView`1">
            <summary>
            A full custom implementation of IBindingListView
            </summary>
            <typeparam name="T">The underlying object type</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityView`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.#ctor(Topics.Radical.ComponentModel.IEntityCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityView`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityView`1"/> 
            class using the supplied array of <typeparamref name="T"/> as the
            underlying list of elements
            </summary>
            <param name="list">The list contining the data to build this view on</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityView`1"/>
            class using the supplied IList&lt;<typeparamref name="T"/>&gt; as the
            underlying list of elements
            </summary>
            <param name="list">The list contining the data to build this view on</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityView`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnInit">
            <summary>
            Called just before the first full indexing
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnCollectionChanged(Topics.Radical.Model.RebuildIndexesEventArgs,Topics.Radical.ComponentModel.CollectionChangeType)">
            <summary>
            This method is called whenever the underlying DataSource fires the CollectionChanged event,
            here inheritors have the opportunity to prevent this instance to rebuild indexes after the
            changes, the default behavior is to rebuild indexes on every change.
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.RebuildIndexesEventArgs"/> instance containing the event data.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnLoad">
            <summary>
            Called when the View is initialized and fully indexed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnWireEntityItemView(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            This method is called whenever a new IEntityItemView is built in order
            to allow the View to add event handlers to the new element
            </summary>
            <param name="item">The IEntityItemView to wire.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnUnwireEntityItemView(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            This method is called alaways before destroyng an EntityItemView
            in order to allow the View to detach event handlers from the element
            </summary>
            <param name="item">The EntityItemView to unwire.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnEntityItemViewEditBegun(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Called when EntityItemView edit begins
            </summary>
            <param name="item">The item. entered in edit mode</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnEntityItemViewEditEnded(Topics.Radical.Model.RebuildIndexesEventArgs)">
            <summary>
            Called when IEntityItemView edit is ended. This method can be overriden in order to decide
            if after an Edit operation the Index has to be rebuilt or not. One reason not to rebuild the
            Indexes after an edit operation is that the position, or the visibility, of the edited element
            could change due to the applied changes.
            </summary>
            <param name="e">A RebuildIndexesEventArgs wich allow derived classes to change the rebuild indexes behavior</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnEntityItemViewEditCanceled(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Called when IEntityItemView edit is canceled by the user
            </summary>
            <param name="item">The item which editing has been cancelled</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Refresh">
            <summary>
            Refreshes this instance, rebuilding internal indexes
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the element at the specified source index to the specified new index.
            </summary>
            <param name="sourceIndex">Index of the source element to move.</param>
            <param name="newIndex">The destination index.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Move(Topics.Radical.ComponentModel.IEntityItemView{`0},System.Int32)">
            <summary>
            Moves the specified item to the specified new index.
            </summary>
            <param name="item">The item to move.</param>
            <param name="newIndex">The destination index.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemoveFilter">
            <summary>
            Removes the current filter applied to the data source.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnFilterChanged">
            <summary>
            Fires the FilterChanged event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnCreateSortComparer">
            <summary>
            Called when this list needs to create the sort comparer used for data sorting.
            </summary>
            <returns>An implementation of the IComparer&lt;IEntityItemView&lt;T&gt;&gt; used to compare items.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"/> and a <see cref="T:System.ComponentModel.ListSortDirection"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/>.
            </summary>
            <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> containing the sorts to apply to the data source.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.ApplySort(System.String)">
            <summary>
            Sorts the data source based on the given sort string.
            </summary>
            <param name="sort">The sort string in T-Sql format</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnSortChanged">
            <summary>
            Fires the SortChanged event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.IndexOf(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="item"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnRemovedAt(Topics.Radical.Model.RebuildIndexesEventArgs)">
            <summary>
            Override this method in order to prevent this instance to rebuild indexes after 
            a remove operation
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.RebuildIndexesEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingList#AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.AllowNew"/> is false. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to add to the indexes used for searching.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddIndex(System.String)">
            <summary>
            Adds the property with the given name to the indexes used for searching.
            </summary>
            <param name="propertyName">The name of the property to add to the indexes used for searching.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemoveIndex(System.String)">
            <summary>
            removes the property with the given name from the indexes used for searching.
            </summary>
            <param name="propertyName">The name of the property to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.GetCustomProperties">
            <summary>
            Gets the all the dinamically added custom property mappings.
            </summary>
            <returns>
            A read-only list af duìinamically added property mappings.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddPropertyMapping(Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor{`0})">
            <summary>
            Adds a the given property to the property mappings of this instance.
            </summary>
            <param name="customProperty">The custom property to add.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddPropertyMapping(System.String)">
            <summary>
            Adds a property mapping that maps the supplied property.
            </summary>
            <param name="propertyName">Name of the property to map to.</param>
            <returns>
            A reference to the dinamically generated property.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddPropertyMapping(System.String,System.String)">
            <summary>
            Adds a property mapping that maps a property using the supplied display name.
            </summary>
            <param name="propertyName">Name of the property to map to.</param>
            <param name="displayName">The display name.</param>
            <returns>
            A reference to the dinamically generated property.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddPropertyMapping``1(System.String,Topics.Radical.ComponentModel.EntityItemViewValueGetter{`0,``0})">
            <summary>
            Adds a property mapping using the specified display name, the supplied property type and the supplied getter.
            </summary>
            <param name="customPropertyName">Custom property name, must be unique among entity properties.</param>
            <param name="customPropertyType">Type of the custom property.</param>
            <param name="getter">A delegate to call in order to get the value of the dinamically generated property.</param>
            <returns>
            A reference to the dinamically generated property.
            </returns>
            <remarks>Using this overload implicitly creates a read-only property because no setter has been supplied.</remarks>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddPropertyMapping``1(System.String,Topics.Radical.ComponentModel.EntityItemViewValueGetter{`0,``0},Topics.Radical.ComponentModel.EntityItemViewValueSetter{`0,``0})">
            <summary>
            Adds a property mapping using the specified display name, the supplied property type and the supplied getter and setter.
            </summary>
            <param name="customPropertyName">Custom property name, must be unique among entity properties.</param>
            <param name="customPropertyType">The type of the new custom property.</param>
            <param name="getter">A delegate to call in order to get the value of the dinamically generated property.</param>
            <param name="setter">A delegate to call in order to set the value of the dinamically generated property.</param>
            <returns>
            A reference to the dinamically generated property.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemovePropertyMapping(Topics.Radical.ComponentModel.EntityItemViewPropertyDescriptor{`0})">
            <summary>
            Removes the property mapping.
            </summary>
            <param name="customProperty">The custom property.</param>
            <returns><c>True</c> if the operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.RemovePropertyMapping(System.String)">
            <summary>
            Removes the property mapping.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>True</c> if the operation was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable. This can be null.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnGetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable. This can be null.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnCreateDescriptor(System.Reflection.PropertyInfo)">
            <summary>
            Called when by this instance in each time this list needs to create a new 
            item property descriptor, inheritors can override this method in order to 
            provide their own descriptor implementation.
            </summary>
            <param name="property">The property to build the descriptor for.</param>
            <returns>The built descriptor.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned. This can be null.</param>
            <returns>The name of the list.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnGetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned. This can be null.</param>
            <returns>The name of the list.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search on.</param>
            <param name="key">The item of the <paramref name="property"/> parameter to search for.</param>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSearching"/> is false. </exception>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Find(System.String,System.Object)">
            <summary>
            Returns the index of the row that has the given property name set to the given key item.
            </summary>
            <param name="propertyName">The property name to search on.</param>
            <param name="key">The item of the <paramref name="propertyName"/> parameter to search for.</param>
            <returns>
            The index of the row that has the given property name set to the given key item.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.IsInAddingNewQueue(`0)">
            <summary>
            Determines whether the specified item is a pending item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specified item is a pending new item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnAddingNew(Topics.Radical.Model.AddingNewEventArgs{`0})">
            <summary>
            Raises the <see cref="E:AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.AddingNewEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.AddNew">
            <summary>
            Adds, if supported, a new Item to this list.
            </summary>
            <returns>The newly added item.</returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.EndNew">
            <summary>
            Ends a pending AddNew operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnEndNew(System.Int32)">
            <summary>
            Called when EndNew].
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnEndNewCompleted(Topics.Radical.Model.RebuildIndexesEventArgs)">
            <summary>
            Override this method in order to prevent this instance to rebuild indexes after 
            an EndNew operation
            </summary>
            <param name="e">The <see cref="T:Topics.Radical.Model.RebuildIndexesEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.EndNew(System.Int32)">
            <summary>
            Ends a pending AddNew operation.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.CancelNew">
            <summary>
            Cancels a pending AddNew operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnCancelNew(System.Int32)">
            <summary>
            Called when on CancelNew].
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.CancelNew(System.Int32)">
            <summary>
            Cancels a pending AddNew operation that is occurring
            at the specified index.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.Model.EntityView`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><collection>true</collection> to release both managed and unmanaged resources; <collection>false</collection> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="property">The name of the property.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Topics.Radical.Model.EntityView`1.System#Collections#Generic#IEnumerable{Topics#Radical#ComponentModel#IEntityItemView{T}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Indexer">
            <summary>
            Gets the indexer.
            </summary>
            <value>The indexer.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.IsDetached">
            <summary>
            Gets or sets a value indicating whether this instance is detached.
            </summary>
            <value>
            	<c>true</c> if this instance is detached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.IsArrayBased">
            <summary>
            Returns a item indicationg this instance has an array
            as underlying data storage or not
            </summary>
            <item>
            	<collection>true</collection> if this instance is array based; otherwise, <collection>false</collection>.
            </item>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.DataSource">
            <summary>
            Gets the underlying DataSource as IList
            </summary>
            <item>The DataSource</item>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AllowMove">
            <summary>
            Gets a value indicating whether moving elements is allowed in this view.
            </summary>
            <value><c>true</c> if move is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.IsFiltered">
            <summary>
            Gets a item indicating whether this instance is currently filtered.
            </summary>
            <item>
            	<collection>true</collection> if this instance is filtered; otherwise, <collection>false</collection>.
            </item>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingListView#SupportsFiltering">
            <summary>
            Gets a item indicating whether the data source supports filtering.
            </summary>
            <item></item>
            <returns>true if the data source supports filtering; otherwise, false. </returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingListView#Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source
            </summary>
            <item></item>
            <returns>The string used to filter items out in the item collection returned by the data source. </returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source
            </summary>
            <value></value>
            <returns>
            The string used to filter items out in the item collection returned by the data source.
            </returns>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.FilterChanged">
            <summary>
            Occurs when filter changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingList#SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
            <item></item>
            <returns>true if the list supports sorting; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
            <summary>
            Gets a item indicating whether the data source supports advanced sorting.
            </summary>
            <item></item>
            <returns>true if the data source supports advanced sorting; otherwise, false. </returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
            <item></item>
            <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"/> has not been called; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
            <item></item>
            <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.
            </summary>
            <item></item>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.SortDescriptions">
            <summary>
            Gets the collection of sort descriptions currently applied to the data source.
            </summary>
            <item></item>
            <returns>The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> currently applied to the data source.</returns>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.SortChanged">
            <summary>
            Occurs when sort changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.RaisesItemChangedEvents">
            <summary>
            Gets a item indicating whether the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"/> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> events.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"/> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> events when one of its property values changes; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a item indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <item></item>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <item></item>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <item></item>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a item indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a item indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Topics.Radical.ComponentModel.IEntityItemView`1"/> at the specified index.
            </summary>
            <item></item>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <item></item>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or an item in the list changes.
            </summary>
            <item></item>
            <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or when an item changes; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.System#ComponentModel#IBindingList#SupportsSearching">
            <summary>
            Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method.
            </summary>
            <item></item>
            <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
            <item></item>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>.
            </summary>
            <item></item>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"/> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>.
            </summary>
            <item></item>
            <returns>true if you can remove items from the list; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AllowSort">
            <summary>
            Gets or sets a value indicating whether this list allow sort.
            </summary>
            <value><c>true</c> if [allow sort]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.AutoGenerateProperties">
            <summary>
            Gets or sets a item indicating whether this instance must auto generate properties.
            The default item is <collection>true</collection>
            </summary>
            <item>
            	<collection>true</collection> if this instance must auto generate properties; otherwise, <collection>false</collection>.
            </item>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.CustomProperties">
            <summary>
            Gets the custom properties.
            </summary>
            <value>The custom properties.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.IsAddingNew">
            <summary>
            Gets a item indicating whether this instance is adding new.
            The case is when AddNew as been called but nor CancelNew nor EndNew
            has already been called.
            </summary>
            <item>
            	<collection>true</collection> if this instance is adding new; otherwise, <collection>false</collection>.
            </item>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.AddingNew">
            <summary>
            Occurs when AddingNew is invoked or the list needs to add a new item.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.PendingNewItem">
            <summary>
            Gets the pending new item.
            </summary>
            <value>The pending new item.</value>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.Disposed">
            <summary>
            Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed"/> event of a component.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.ISite"/> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Events">
            <summary>
            Gets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.DesignMode">
            <summary>
            Gets a value indicating whether [design mode].
            </summary>
            <value><c>true</c> if [design mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Model.EntityView`1.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="E:Topics.Radical.Model.EntityView`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Topics.Radical.Model.EntityItemViewFilterBase`1">
            <summary>
            Provides a standard method to determine if an object instance 
            should be, or shoud not, included in the result set of a filter
            operation.
            </summary>
            <typeparam name="T">The type of the object to test.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewFilterBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.EntityItemViewFilterBase`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewFilterBase`1.ShouldInclude(`0)">
            <summary>
            Gets a item that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns>
            	<collection>True</collection> if the item should be included, otherwise <collection>false</collection>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.EntityItemViewFilterBase`1.Topics#Radical#ComponentModel#IEntityItemViewFilter#ShouldInclude(System.Object)">
            <summary>
            Gets a item that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns>
            	<collection>True</collection> if the item should be included, otherwise <collection>false</collection>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.PredicateEntityItemViewFilter`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.PredicateEntityItemViewFilter`1"/> class.
            </summary>
            <param name="filterDelegate">The filter delegate.</param>
        </member>
        <member name="M:Topics.Radical.Model.PredicateEntityItemViewFilter`1.#ctor(System.Predicate{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.PredicateEntityItemViewFilter`1"/> class.
            </summary>
            <param name="filterDelegate">The filter delegate.</param>
            <param name="filterName">The name of the filter.</param>
        </member>
        <member name="M:Topics.Radical.Model.PredicateEntityItemViewFilter`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.PredicateEntityItemViewFilter`1.ShouldInclude(`0)">
            <summary>
            Gets a item that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns>
            	<collection>True</collection> if the item should be included, otherwise <collection>false</collection>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Model.ViewAllEntityItemViewFilter`1">
            <summary>
            This filter is a include all filter, the <collection>ShouldInclude( T )</collection> method always returns true.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.ViewAllEntityItemViewFilter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.ViewAllEntityItemViewFilter`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.ViewAllEntityItemViewFilter`1.ShouldInclude(`0)">
            <summary>
            Gets a item that indicates if the given object instance should be included in the result set of the filter operation..
            </summary>
            <param name="item">The item to test.</param>
            <returns>
            	<collection>True</collection> if the item should be included, otherwise <collection>false</collection>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.ViewAllEntityItemViewFilter`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Model.Indexer`1">
            <summary>
            The Indexer class is primarly an Index manager for the View,
            its primary target is to handle the relationship between an
            EntityItemView instance and the Index of the encapsulated T 
            element in the DataSource.
            </summary>
            <typeparam name="T">The type of the element encapsulated by the EntityView.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.#ctor(Topics.Radical.Model.EntityView{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.Indexer`1"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.System#Collections#Generic#IEnumerable{Topics#Radical#ComponentModel#IEntityItemView{T}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Remove(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.RemoveAt(System.Int32)">
            <summary>
            Removes the corrurrence of the EntityItemView at the specified index
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.CopyTo(Topics.Radical.ComponentModel.IEntityItemView{`0}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Contains(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Add(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.IndexOf(`0)">
            <summary>
            Given a T object this method return the index
            of the EntityItemView, that incapsulates the T
            object, in the View.
            </summary>
            <param name="item">The item to find the index for.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.IndexOf(Topics.Radical.ComponentModel.IEntityItemView{`0})">
            <summary>
            Return the index of an EntityItemView in the View.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.FindObjectIndexInDataSource(System.Int32)">
            <summary>
            Given the Index of an EntityItemView, in the View, returns the Index
            of the encapsulated T element in the DataSource, otherwise -1.
            </summary>
            <param name="objectItemViewIndexInView">The EntityItemView index.</param>
            <returns>The index of the T element, otherwise -1</returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.FindEntityItemViewIndexInView(System.Int32)">
            <summary>
            Given the Index of a T element, in the DataSource, returns the
            Index af the EntityItemView, in the View, that incapsulates the
            T element, otherwise -1.
            </summary>
            <param name="entityIndexInDataSource">The index of the T element in DataSource.</param>
            <returns>The Index of the EntityItemView, otherwise -1</returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the given property descriptor to the index.
            </summary>
            <param name="property">The property to index.</param>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Finds the given key searching on all items for the specified property.
            If the property is an indexed property the index is used for faster searching.
            </summary>
            <param name="property">The property to look at.</param>
            <param name="key">The key to search.</param>
            <returns>The inedex of the first item the match the given key.</returns>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the given PropertyDescriptor fomr the indexed properties.
            </summary>
            <param name="property">The property to remove.</param>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.ClearIndexes">
            <summary>
            Clears the built indexes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.Rebuild">
            <summary>
            Rebuilds all the Indexes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.ApplySort">
            <summary>
            Applies the current sort.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Indexer`1.RemoveSort">
            <summary>
            Removes the sort applied to the Index.
            </summary>
        </member>
        <member name="P:Topics.Radical.Model.Indexer`1.IsReadOnly">
            <summary>
            Gets a item indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <item></item>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Topics.Radical.Model.Indexer`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <item></item>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Topics.Radical.Model.Indexer`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Topics.Radical.Model.EntityItemView`1"/> at the specified index.
            </summary>
            <item></item>
        </member>
        <member name="M:Topics.Radical.Model.RebuildIndexesEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.RebuildIndexesEventArgs"/> class.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Topics.Radical.Model.RebuildIndexesEventArgs.Index">
            <summary>
            Gets the index of the removed item that is causing a rebuild index request.
            </summary>
            <value>The index.</value>
        </member>
        <member name="M:Topics.Radical.Model.Entity.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Topics.Radical.Model.Entity"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Entity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Model.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Entity.EnsureNotDisposed">
            <summary>
            Verifies that this instance is not disposed, throwing an
            <see cref="T:System.ObjectDisposedException"/> if this instance has
            been already disposed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.Entity"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Entity.SetInitialPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Sets the initial property value building default
            metadata for the given property and setting the default
            value in the built metadata.
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="property">The property.</param>
            <param name="value">The default value.</param>
            <returns></returns>
            <remarks>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue
            is that SetInitialPropertyValue does not raise a property change notification.
            </remarks>
        </member>
        <member name="M:Topics.Radical.Model.Entity.SetInitialPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0})">
            <summary>
            Sets the initial property value building default
            metadata for the given property and setting the default
            value in the built metadata. With this overload the default
            value is lazily evaluated only when requested by the infrastructure.
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="property">The property.</param>
            <param name="lazyValue">The lazy value.</param>
            <returns></returns>
            <remarks>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue
            is that SetInitialPropertyValue does not raise a property change notification.
            </remarks>
        </member>
        <member name="M:Topics.Radical.Model.Entity.SetInitialPropertyValue``1(System.String,``0)">
            <summary>
            Sets the initial property value building default 
            metadata for the given property and setting the default
            value in the built metadata.
            </summary>
            <remarks>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue 
            is that SetInitialPropertyValue does not raise a property change notification.
            </remarks>
            <typeparam name="T">The property type</typeparam>
            <param name="property">The property.</param>
            <param name="value">The default value.</param>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetPropertyMetadata``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property metadata.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>
            An instance of the requested property metadata.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetPropertyMetadata``1(System.String)">
            <summary>
            Gets the property metadata.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of the requested property metadata.</returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetDefaultMetadata``1(System.String)">
            <summary>
            Gets the default property metadata.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of the requested default property metadata.</returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.SetPropertyMetadata``1(Topics.Radical.Model.PropertyMetadata{``0})">
            <summary>
            Sets the property metadata.
            </summary>
            <param name="metadata">The property metadata.</param>
        </member>
        <member name="M:Topics.Radical.Model.Entity.HasMetadata``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Determines whether metadata for the specified property has been set.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if metadata for the specified property has been set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property value.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="property">A Lambda Expressione representing the property.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0})">
            <summary>
            Gets the property value.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="property">A Lambda Expressione representing the property.</param>
            <param name="initialValueSetter">The initial value setter.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="M:Topics.Radical.Model.Entity.GetPropertyValue``1(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="P:Topics.Radical.Model.Entity.Events">
            <summary>
            Gets the events.
            </summary>
            <item>The events.</item>
        </member>
        <member name="T:Topics.Radical.Model.MementoEntity">
            <summary>
            The <c>MementoEntity</c> class provides full support for the change tracking
            model exposed by the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> interface.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.EnsureNotDisposed">
            <summary>
            Verifies that this instance is not disposed, throwing an
            <see cref="T:System.ObjectDisposedException"/> if this instance has
            been already disposed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
            <param name="memento">The memento.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
            <param name="registerAsTransient">if set to <c>true</c> [register as transient].</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor(Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
            <param name="memento">The memento.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.#ctor(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.MementoEntity"/> class.
            </summary>
            <param name="memento">The memento.</param>
            <param name="registerAsTransient">if set to <c>true</c> [register as transient].</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.GetDefaultMetadata``1(System.String)">
            <summary>
            Gets the default property metadata.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>
            An instance of the requested default property metadata.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.SetInitialPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Boolean)">
            <summary>
            Sets the initial property value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="trackChanges">The track changes.</param>
            <returns>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue
            is that SetInitialPropertyValue does not raise a property change notification.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.SetInitialPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0},System.Boolean)">
            <summary>
            Sets the initial property value, using a lazily evaluated value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <param name="lazyValue">The lazy value.</param>
            <param name="trackChanges">The track changes.</param>
            <returns>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue
            is that SetInitialPropertyValue does not raise a property change notification.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.SetInitialPropertyValue``1(System.String,``0,System.Boolean)">
            <summary>
            Sets the initial property value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="trackChanges">The track changes.</param>
            <returns>
            This method is a shortcut for the GetMetadata method, in order
            to fine customize property metadata use the GetMetadata method.
            The main difference between SetInitialPropertyValue and SetPropertyValue
            is that SetInitialPropertyValue does not raise a property change notification.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.GetTrackingService">
            <summary>
            Gets the chenge tracking service.
            </summary>
            <returns>The current change tracking service, if any; otherwise null.</returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.RegisterTransient">
            <summary>
            Registers this instance as transient.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.OnRegisterTransient(Topics.Radical.ComponentModel.ChangeTracking.TransientRegistration)">
            <summary>
            Called in order to register this instance as transient.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.OnMementoChanged(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Called when the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> changes.
            </summary>
            <param name="newMemento">The new memento service.</param>
            <param name="oldMemmento">The old memmento service.</param>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.CacheChange``1(System.String,``0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{``0})">
            <summary>
            Caches the supplied item in the active change tracking service.
            </summary>
            <typeparam name="T">The system type of the item to cache.</typeparam>
            <param name="value">The value to cache.</param>
            <param name="restore">A delegate to call when the change tracking 
            service needs to restore the cached change.</param>
            <returns>A reference to the cached change as an instance of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/> interface.</returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.CacheChange``1(System.String,``0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{``0},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{``0})">
            <summary>
            Caches the supplied item in the active change tracking service.
            </summary>
            <typeparam name="T">The system type of the item to cache.</typeparam>
            <param name="value">The value to cache.</param>
            <param name="restore">A delegate to call when the change tracking
            service needs to restore the cached change.</param>
            <param name="commit">A delegate to call when the change tracking
            service needs to commit the cached change. Passing a null item for
            this parameter means that this instance does not need to be notified when
            the change is committed.</param>
            <returns>
            A reference to the cached change as an instance of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/> interface.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.MementoEntity.CacheChange``1(System.String,``0,Topics.Radical.ComponentModel.ChangeTracking.RejectCallback{``0},Topics.Radical.ComponentModel.ChangeTracking.CommitCallback{``0},Topics.Radical.ComponentModel.ChangeTracking.AddChangeBehavior)">
            <summary>
            Caches the supplied item in the active change tracking service.
            </summary>
            <typeparam name="T">The system type of the item to cache.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to cache.</param>
            <param name="restore">A delegate to call when the change tracking
            service needs to restore the cached change.</param>
            <param name="commit">A delegate to call when the change tracking
            service needs to commit the cached change. Passing a null item for
            this parameter means that this instance does not need to be notified when
            the change is committed.</param>
            <param name="direction">The direction.</param>
            <returns>
            A reference to the cached change as an instance of <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChange"/> interface.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.MementoEntity.Topics#Radical#ComponentModel#ChangeTracking#IMemento#Memento">
            <summary>
            Gets or sets the change tracking service to use as memento
            features provider.
            </summary>
            <value>The change tracking service.</value>
        </member>
        <member name="P:Topics.Radical.Model.MementoEntity.IsTracking">
            <summary>
            Gets a item indicating whether there is an active change tracking service.
            </summary>
            <value>
            	<c>true</c> if there is an active change tracking service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Model.MementoPropertyMetadata`1">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.PropertyMetadata.Create``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates the metadata for specified property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyOwner">The property owner.</param>
            <param name="property">The property.</param>
            <returns>
            An instance of the property metadata.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.PropertyMetadata.Create``1(System.Object,System.String)">
            <summary>
            Creates the metadata for specified property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyOwner">The property owner.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            An instance of the property metadata.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.PropertyMetadata.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.PropertyMetadata"/> class.
            </summary>
            <param name="propertyOwner">The property owner.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Topics.Radical.Model.PropertyMetadata.DisableChangesNotifications">
            <summary>
            Disables changes notifications for this property.
            </summary>
            <returns>This metadata instance.</returns>
        </member>
        <member name="M:Topics.Radical.Model.PropertyMetadata.EnableChangesNotifications">
            <summary>
            Enables changes notifications for this property.
            </summary>
            <returns>This metadata instance.</returns>
        </member>
        <member name="P:Topics.Radical.Model.PropertyMetadata.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:Topics.Radical.Model.PropertyMetadata.NotifyChanges">
            <summary>
            Gets or sets a value indicating whether the property represented by this metadata should notify changes.
            </summary>
            <value>
              <c>true</c> if the property should notify changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Model.PropertyValue`1">
            <summary>
            Identifies a strongly-typed property value.
            </summary>
            <typeparam name="T">The type of the stored value.</typeparam>
        </member>
        <member name="T:Topics.Radical.Model.PropertyValue">
            <summary>
            Identifies a property value.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.PropertyValue.GetValue">
            <summary>
            Gets the stored property value.
            </summary>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Topics.Radical.Model.PropertyValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.PropertyValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Model.PropertyValue`1.GetValue">
            <summary>
            Gets the stored property value.
            </summary>
            <returns>The stored value.</returns>
        </member>
        <member name="P:Topics.Radical.Model.PropertyValue`1.Value">
            <summary>
            Gets the stored value.
            </summary>
            <value>The stored value.</value>
        </member>
        <member name="M:Topics.Radical.Model.PropertyValueChangedArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.PropertyValueChangedArgs`1"/> class.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:Topics.Radical.Model.PropertyValueChangedArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Topics.Radical.Model.PropertyValueChangedArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="M:Topics.Radical.Model.Factories.ChangeTrackingServiceFactory.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.Factories.ChangeTrackingServiceFactory"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Topics.Radical.Model.Factories.ChangeTrackingServiceFactory.Create">
            <summary>
            Creates a new <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> instance.
            </summary>
            <returns>
            The new <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.InsertEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.InsertEventArgs`1"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Topics.Radical.Model.InsertEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Topics.Radical.Model.InsertEventArgs`1.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="T:Topics.Radical.Model.NullDataContext">
            <summary>
            An empty implementation of the <see cref="T:Topics.Radical.ComponentModel.IDataContext"/> interface.
            </summary>
        </member>
        <member name="F:Topics.Radical.Model.NullDataContext.Instance">
            <summary>
            A default singleton instance of the NullDataContext.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Insert(System.Object)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Update(System.Object)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Save(System.Object)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Delete(System.Object)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Clear">
            <summary>
            Clears this instance removing all the cached entities, cancelling all pending saves, updates and deletes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.IsAttached(System.Object)">
            <summary>
            Determines whether the specified entity is attached.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is attached; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Detach(System.Object)">
            <summary>
            Detaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
            <returns>The begun transaction.</returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction with the specified isolation lavel.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>The begun transaction.</returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.FlushChanges">
            <summary>
            Flushes all the the pending changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.GetByQuery``2(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{``0,``1})">
            <summary>
            Gets a list of entity that satifies the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="querySpec">The query specification.</param>
            <returns>
            The list of entities that satifies the given query.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.GetScalar``2(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{``0,``1})">
            <summary>
            Gets a single value (a scalar value) that satisfies the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="scalarSpec">The scalar specification.</param>
            <returns>
            The scalar value that satisfies the given query.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.GetBySpecification``2(Topics.Radical.ComponentModel.QueryModel.ISpecification{``0,``1})">
            <summary>
            Gets a list of entity that satifies the given generic specification.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the expected result.</typeparam>
            <param name="specification">The generic specification.</param>
            <returns>
            The list of entities that satifies the given generic specification.
            </returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.GetByKey``1(System.Object)">
            <summary>
            Gets single entity given its key.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="key">The entity key.</param>
            <returns>The requested entity.</returns>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.NullDataContext.Execute``1(``0)">
            <summary>
            Executes the specified command.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command.</param>
            <returns>
            The number of affected rows.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.NullDataContext.HasPendingChanges">
            <summary>
            Gets a value indicating whether this instance has pending changes.
            </summary>
            <value>
            	<c>true</c> if this instance has pending changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Model.NullDataContext.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Topics.Radical.Model.Providers.QuerySystemManager">
            <summary>
            Default <see cref="T:Topics.Radical.ComponentModel.QueryModel.IQuerySystemManager"/> implementation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.Providers.QuerySystemManager.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.Providers.QuerySystemManager"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Topics.Radical.Model.Providers.QuerySystemManager.GetQueryEngine``3(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{``0,``1})">
            <summary>
            Gets the query engine for the given query.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result entity.</typeparam>
            <typeparam name="TProvider">The type of the query provider/session/data context.</typeparam>
            <param name="querySpec">The query specication to search an engine for.</param>
            <returns>
            A query engine instance.
            </returns>
            <exception cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException">
            A <c>SpecificationNotSupportedException</c> is raised if the infrastructure cannot
            find a suitable engine for the given specification.
              </exception>
        </member>
        <member name="M:Topics.Radical.Model.Providers.QuerySystemManager.GetScalarEvaluator``3(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{``0,``1})">
            <summary>
            Gets the scalar evaluator for the given scalar specification.
            </summary>
            <typeparam name="TSource">The type of the source entity.</typeparam>
            <typeparam name="TResult">The type of the expected result entity.</typeparam>
            <typeparam name="TProvider">The type of the query provider/session/data context.</typeparam>
            <param name="scalarSpec">The scalar spec to search an engine for.</param>
            <returns>
            A scalar specification engine instance.
            </returns>
            <exception cref="T:Topics.Radical.ComponentModel.QueryModel.SpecificationNotSupportedException">
            A <c>SpecificationNotSupportedException</c> is raised if the infrastructure cannot
            find a suitable engine for the given specification.
              </exception>
        </member>
        <member name="M:Topics.Radical.Model.Providers.QuerySystemManager.GetBatchCommandEngine``2(``0)">
            <summary>
            Gets the batch command engine.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="command">The command.</param>
            <returns>
            The bengine responsible for the execution of the given command.
            </returns>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.AbstractQueryEngine`4">
            <summary>
            A base implementation of the IQuerySpecification interface.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractQueryEngine`4.ExecuteQuery(`0,Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Executes the given query against the given provider.
            </summary>
            <param name="querySpec">The query specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractQueryEngine`4.ExecuteQuery(Topics.Radical.ComponentModel.QueryModel.IQuerySpecification{`1,`2},Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Executes the given query against the given provider.
            </summary>
            <param name="querySpec">The query specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.AbstractQuerySpecification`2">
            <summary>
            A base query specification.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractQuerySpecification`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.QueryModel.AbstractQuerySpecification`2"/> class.
            </summary>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.AbstractScalarEvaluator`4">
            <summary>
            A base implementation of the IScalarSpecification interface.
            </summary>
            <typeparam name="TScalar">The type of the scalar.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractScalarEvaluator`4.Evaluate(`0,Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Evaluates the specified scalar specification against the given provider.
            </summary>
            <param name="scalarSpec">The scalar specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>The searched entity.</returns>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractScalarEvaluator`4.Evaluate(Topics.Radical.ComponentModel.QueryModel.IScalarSpecification{`1,`2},Topics.Radical.ComponentModel.IDataContext,`3)">
            <summary>
            Evaluates the specified scalar specification against the given provider.
            </summary>
            <param name="scalarSpec">The scalar specification to execute.</param>
            <param name="context">The current data context.</param>
            <param name="provider">The provider to use a data context.</param>
            <returns>The searched entity.</returns>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.AbstractScalarSpecification`2">
            <summary>
            A base IScalarSpecification.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AbstractScalarSpecification`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.QueryModel.AbstractScalarSpecification`2"/> class.
            </summary>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.AllEntitiesQuery`2">
            <summary>
            Defines a query to retrieve all entities of the given type.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.AllEntitiesQuery`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.QueryModel.AllEntitiesQuery`2"/> class.
            </summary>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.EntitiesByKeywordsQuery`2">
            <summary>
            Defines a query to retrive entities given a list of keywords.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.EntitiesByKeywordsQuery`2.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.QueryModel.EntitiesByKeywordsQuery`2"/> class.
            </summary>
            <param name="keywords">The keywords.</param>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.EntitiesByKeywordsQuery`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.QueryModel.EntitiesByKeywordsQuery`2.Keywords">
            <summary>
            Gets the keywords.
            </summary>
        </member>
        <member name="T:Topics.Radical.Model.QueryModel.EntityByKeyQuery`2">
            <summary>
            Defines a scalar query to retrieve an entity given its key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.EntityByKeyQuery`2.#ctor(Topics.Radical.ComponentModel.IKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.QueryModel.EntityByKeyQuery`2"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Topics.Radical.Model.QueryModel.EntityByKeyQuery`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Topics.Radical.Model.QueryModel.EntityByKeyQuery`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:Topics.Radical.Model.SetValueAtEventArgs`1.#ctor(System.Int32,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Model.SetValueAtEventArgs`1"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:Topics.Radical.Model.SetValueAtEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:Topics.Radical.Observers.AbstractMonitor`1">
            <summary>
            A base abstract observer, based on the IMonitor interface
            </summary>
            <typeparam name="T">The monitored type.</typeparam>
        </member>
        <member name="T:Topics.Radical.Observers.AbstractMonitor">
            <summary>
            A base abstract observer, based on the IMonitor interface
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.OnChanged">
            <summary>
            Called in order to raise the Changed event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.NotifyChanged">
            <summary>
            Asks this monitor to raise a change notification in order
            to trigger all the listeners.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.#ctor(Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.#ctor(System.Object,Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.StartMonitoring(System.Object)">
            <summary>
            Starts monitoring the given source object.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.StopMonitoring">
            <summary>
            Stops all the monitoring operation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor.OnStopMonitoring(System.Boolean)">
            <summary>
            Called in order to allow inheritors to stop the monitoring operations.
            </summary>
            <param name="targetDisposed"><c>True</c> if this call is subsequent to the Dispose of the monitored instance.</param>
        </member>
        <member name="E:Topics.Radical.Observers.AbstractMonitor.Changed">
            <summary>
            Occurs when the source monitored by this monitor changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Observers.AbstractMonitor.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:Topics.Radical.Observers.AbstractMonitor.WeakSource">
            <summary>
            Gets the weak source.
            </summary>
            <value>The weak source.</value>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor`1.#ctor(`0,Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.AbstractMonitor`1.#ctor(Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.AbstractMonitor`1"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="P:Topics.Radical.Observers.AbstractMonitor`1.Source">
            <summary>
            Gets the monitored source.
            </summary>
            <value>The monitored source.</value>
        </member>
        <member name="T:Topics.Radical.Observers.BrokerObserver">
            <summary>
            A static entry to simplify the creation a <see cref="T:Topics.Radical.Observers.MessageBrokerMonitor"/>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.BrokerObserver.Using(Topics.Radical.ComponentModel.Messaging.IMessageBroker)">
            <summary>
            Creates a new <see cref="T:Topics.Radical.Observers.MessageBrokerMonitor"/> that monitors 
            the specified message broker.
            </summary>
            <param name="broker">The message broker.</param>
            <returns>The new <see cref="T:Topics.Radical.Observers.MessageBrokerMonitor"/>.</returns>
        </member>
        <member name="T:Topics.Radical.Observers.MessageBrokerMonitor">
            <summary>
            An observer to monitor messages that are handled by a given message broker.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.MessageBrokerMonitor.#ctor(Topics.Radical.ComponentModel.Messaging.IMessageBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.MessageBrokerMonitor"/> class.
            </summary>
            <param name="broker">The message broker.</param>
        </member>
        <member name="M:Topics.Radical.Observers.MessageBrokerMonitor.WaitFor``1">
            <summary>
            Waits for the specified message type and raise the Changed event whenever the
            specified message is dispatched or broadcasted.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <returns>This monitor instance.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.MessageBrokerMonitor.WaitFor``1(System.Func{``0,System.Boolean})">
            <summary>
            Waits for the specified message type and raise the Changed event 
            if the supplied confition is satisfied by the dispatched or broadcasted message.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="filter">The filter condition.</param>
            <returns>This monitor instance.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.MessageBrokerMonitor.OnStopMonitoring(System.Boolean)">
            <summary>
            Called in order to allow inheritors to stop the monitoring operations.
            </summary>
            <param name="targetDisposed"><c>True</c> if this call is subsequent to the Dispose of the monitored instance.</param>
        </member>
        <member name="T:Topics.Radical.Observable`1">
            <summary>
            An observable generic type.
            </summary>
            <typeparam name="T">The type proxied by this observable.</typeparam>
        </member>
        <member name="M:Topics.Radical.Observable`1.OnPropertyChanged">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observable`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observable`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Observable`1.op_Implicit(Topics.Radical.Observable{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Topics.Radical.Observable`1"/> to <see ref="T"/>.
            </summary>
            <param name="val">The source value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="E:Topics.Radical.Observable`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Observable`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Topics.Radical.Observers.PropertyObserver">
            <summary>
            A static entry to simplify the creation a PropertyChangedMonitor.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyObserver.For``1(``0)">
            <summary>
            Monitors the specified source.
            </summary>
            <typeparam name="T">The type of the source to monitor.</typeparam>
            <param name="source">The source.</param>
            <returns>An instance of the monitor.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyObserver.For``1(``0,Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Monitors the specified source.
            </summary>
            <typeparam name="T">The type of the source to monitor.</typeparam>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>An instance of the monitor.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyObserver.ForAllPropertiesOf``1(``0)">
            <summary>
            Monitors all the properties of specified source.
            </summary>
            <typeparam name="T">The type of the source to monitor.</typeparam>
            <param name="source">The source.</param>
            <returns>
            An instance of the monitor.
            </returns>
        </member>
        <member name="T:Topics.Radical.Observers.PropertyChangedMonitor">
            <summary>
            A specialized observer to monitor INotifyPropertyChanged instances.
            </summary>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor.#ctor(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.PropertyChangedMonitor"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor.StartMonitoring(System.Object)">
            <summary>
            Starts monitoring the given source object.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor.OnStopMonitoring(System.Boolean)">
            <summary>
            Called in order to allow inheritors to stop the monitoring operations.
            </summary>
            <param name="targetDisposed"><c>True</c> if this call is subsequent to the Dispose of the monitored instance.</param>
        </member>
        <member name="T:Topics.Radical.Observers.PropertyChangedMonitor`1">
            <summary>
            A specialized observer to monitor INotifyPropertyChanged instances.
            </summary>
            <typeparam name="T">The type of the item to monitor.</typeparam>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.PropertyChangedMonitor`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.#ctor(`0,Topics.Radical.ComponentModel.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Observers.PropertyChangedMonitor`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.Observe(System.String)">
            <summary>
            Observes the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            Itself, used for fluent programming.
            </returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.Observe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Observes the specified property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.Observe``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,System.String})">
            <summary>
            Observes the specified property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="callback">The callback.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.Observe(System.String,System.Action{`0,System.String})">
            <summary>
            Observes the specified property.
            </summary>
            <param name="propertyName">The property.</param>
            <param name="callback">The callback.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.Observe``1(Topics.Radical.Observable{``0})">
            <summary>
            Observes the specified observable property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.StopObserving``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Stops observing the specified property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.StopObserving``1(Topics.Radical.Observable{``0})">
            <summary>
            Stops observing the specified observable property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <returns>Itself, used for fluent programming.</returns>
        </member>
        <member name="M:Topics.Radical.Observers.PropertyChangedMonitor`1.OnStopMonitoring(System.Boolean)">
            <summary>
            Called in order to allow inheritors to stop the monitoring operations.
            </summary>
            <param name="targetDisposed"><c>True</c> if this call is subsequent to the Dispose of the monitored instance.</param>
        </member>
        <member name="E:Topics.Radical.Observers.PropertyChangedMonitor`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Topics.Radical.Resources.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.AllowNewException">
            <summary>
              Looks up a localized string similar to Not allowed to add new items..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.CannotAccessEntityViewException">
            <summary>
              Looks up a localized string similar to Cannot directly access current EntityView (Unsupported Action :{0})..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.CreateNewNotSupportedException">
            <summary>
              Looks up a localized string similar to AllowNew is set to false, cannot call CreateNew()..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.EnumValidatorNotDefinedException">
            <summary>
              Looks up a localized string similar to Supplied enum value is not defined in the supplied enum type..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.ExtractDescriptionMissingAttributeException">
            <summary>
              Looks up a localized string similar to Missing description attribute on Enum type..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.IsReadOnlyException">
            <summary>
              Looks up a localized string similar to Current object is read only..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.OnCreateNewReturnNullException">
            <summary>
              Looks up a localized string similar to OnCreateNew cannot return a null reference.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.PropertyNotFoundException">
            <summary>
              Looks up a localized string similar to Property not Found: {0}..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Exceptions.SubscribeToMessageAttributeInvalidMessageType">
            <summary>
              Looks up a localized string similar to The suplied message type represents a type that does not inherit from IMessage.
            </summary>
        </member>
        <member name="T:Topics.Radical.Resources.Labels">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.DefaulPredicateFilterName">
            <summary>
              Looks up a localized string similar to Default Predicate name..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.DefaultFilterName">
            <summary>
              Looks up a localized string similar to Default name..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.EntityByKeyQuery">
            <summary>
              Looks up a localized string similar to Entity by Key query..
            </summary>
        </member>
        <member name="P:Topics.Radical.Resources.Labels.ViewAllFilterName">
            <summary>
              Looks up a localized string similar to View all..
            </summary>
        </member>
        <member name="T:Topics.Radical.Threading.IAfterArgs`1">
            <summary>
            Defines async arguments returned to the caller after the execution.
            </summary>
            <typeparam name="T">The type of the incoming argument.</typeparam>
        </member>
        <member name="T:Topics.Radical.Threading.IAsyncArgs`1">
            <summary>
            Defines async arguments given to the AsyncWorker by the caller.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IAsyncArgs`1.Argument">
            <summary>
            Gets the argument given to the AsyncWorker by the caller.
            </summary>
            <value>The argument.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IAsyncArgs`1.IsCancellationPending">
            <summary>
            Gets a value indicating whether there is pending cancellation request.
            </summary>
            <value>
            	<c>true</c> if there is pending cancellation request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Threading.IAfterArgs`2">
            <summary>
            Defines async arguments returned to the caller after the execution.
            </summary>
            <typeparam name="T">The type of the incoming argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IAfterArgs`2.Result">
            <summary>
            Gets the result of the async operation.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IOutputAfterArgs`1">
            <summary>
            Defines async arguments returned to the caller after the execution.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IOutputAfterArgs`1.Result">
            <summary>
            Gets the result of the async operation.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IAsyncArgs`2">
            <summary>
            Defines async arguments given to the AsyncWorker by the caller.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IAsyncArgs`2.Result">
            <summary>
            Gets or sets the result of the async operation.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IOutputAsyncArgs`1">
            <summary>
            Defines async arguments returned by AsyncWorker to the caller.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IOutputAsyncArgs`1.Result">
            <summary>
            Gets or sets the result of the async operation.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IAsyncErrorArgs">
            <summary>
            Defines arguments returned to the caller if an 
            unhandled exception occurs during the async operation.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.IAsyncErrorArgs.Handled">
            <summary>
            Gets or sets a value indicating whether 
            the caller has handled the async error.
            If handled is set to false the exception 
            is automatically rethrown by the worker.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IAsyncErrorArgs.Error">
            <summary>
            Gets the error occured during the async execution.
            </summary>
            <value>The async error.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IBeforeArgs`1">
            <summary>
            Defines arguments passed to the caller 
            before the async operation starts.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
        </member>
        <member name="T:Topics.Radical.Threading.ICancelArgs">
            <summary>
            Provides support for the canceling of an async operation.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.ICancelArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the async 
            operation should be canceled. The default value is
            <c>false</c>.
            </summary>
            <value><c>true</c> if the async operation should be canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IBeforeArgs`1.Argument">
            <summary>
            Gets the argument given to the AsyncWorker by the caller.
            </summary>
            <value>The argument.</value>
        </member>
        <member name="M:Topics.Radical.Threading.WorkerErrorArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Threading.WorkerErrorArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Topics.Radical.Threading.WorkerErrorArgs.Error">
            <summary>
            Gets the error occured during the async execution.
            </summary>
            <value>The async error.</value>
        </member>
        <member name="P:Topics.Radical.Threading.WorkerErrorArgs.Handled">
            <summary>
            Gets or sets a value indicating whether 
            the caller has handled the async error.
            If handled is set to false the exception 
            is automatically rethrown by the worker.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Topics.Radical.Threading.AsyncErrorEventArgs">
            <summary>
            Defines the event arguments for the AsynError event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.AsyncErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Threading.AsyncErrorEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Topics.Radical.Threading.AsyncErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Topics.Radical.Threading.AsyncErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the error has been is handled or not.
            </summary>
            <value><c>true</c> if the error has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Topics.Radical.Threading.AsyncWorker">
            <summary>
            AsyncWorker creation and configuration entry point.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.AsyncWorker.Using``1(``0)">
            <summary>
            Create an AsyncWorker passing in the supplied argument.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="argument">The argument value.</param>
            <returns>An instance of the created worker.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.AsyncWorker.Expecting``1">
            <summary>
            Create an AsyncWorker that has no input arguments but 
            procudes the given result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>An instance of the created worker.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.AsyncWorker.Expecting``1(``0)">
            <summary>
            Create an AsyncWorker that has no input arguments but 
            procudes a result whose type definition is equal to the
            supplied one.
            </summary>
            <remarks>
            This overload is usefull when the worker must return more then
            one result and the caller does not want to define a specific tupla
            to handle multiple results, this overload allows the caller to pass
            in an anonymous type that the compiler will use as type reference to
            check that the returned type matches the supllied one.
            </remarks>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sample">The result sample.</param>
            <returns>An instance of the created worker.</returns>
        </member>
        <member name="T:Topics.Radical.Threading.IExecutableWorker">
            <summary>
            Defines the contract for an async worker that has not yet started.
            </summary>
        </member>
        <member name="T:Topics.Radical.Threading.IWorkerStatus">
            <summary>
            Defines the basic contract to handle the status of an async worker.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.IWorkerStatus.IsBusy">
            <summary>
            Gets a value indicating whether this worker is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Topics.Radical.Threading.IWorkerStatus.Completed">
            <summary>
            Occurs when the async worker has completed its work.
            </summary>
        </member>
        <member name="E:Topics.Radical.Threading.IWorkerStatus.AsyncError">
            <summary>
            Occurs when the async worker has completed its work but there are unhandled async errors.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.IWorkerStatus.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed its async work.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Threading.IWorkerStatus.AsyncWaitHandle">
            <summary>
            Gets the async wait handle that the calling thread can use to wait for the async work completition.
            </summary>
            <value>The async wait handle.</value>
        </member>
        <member name="M:Topics.Radical.Threading.IExecutableWorker.Execute">
            <summary>
            Executes the async action incapsulatewd by this worker.
            </summary>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IExecutableWorker.AddTrigger(Topics.Radical.ComponentModel.IMonitor)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns>This worker instance.</returns>
        </member>
        <member name="T:Topics.Radical.Threading.IInputOutputWorker`2">
            <summary>
            Defines a configurable async worker that has both input arguments 
            and an output result.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IInputOutputWorker`2.Configure(System.Action{Topics.Radical.Threading.IInputOutputWorkerConfiguration{`0,`1}})">
            <summary>
            Configures the current worker.
            </summary>
            <param name="cfg">The configuration handler.</param>
            <returns>A configured worker ready to be executed.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputOutputWorker`2.Execute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0,`1}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncAction">The async action.</param>
            <returns>An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputOutputWorker`2.OnExecute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0,`1}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncAction">The async action.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="T:Topics.Radical.Threading.IConfiguredInputOutputWorker`2">
            <summary>
            Defines a configured async worker that has both input arguments 
            and an output result ready to be executed.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredInputOutputWorker`2.Execute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0,`1}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncAction">The async action.</param>
            <returns>An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredInputOutputWorker`2.OnExecute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0,`1}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncAction">The async action.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="T:Topics.Radical.Threading.IInputOutputWorkerConfiguration`2">
            <summary>
            Defines the configuration for a worker with input
            arguments and a result.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Topics.Radical.Threading.IWorkerConfiguration">
            <summary>
            Defines the basic configuration for an async worker.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.IWorkerConfiguration.Error">
            <summary>
            Gets or sets the handler to be invoked if an async error occurs.
            </summary>
            <remarks>If no error handler is injected and an async exception is 
            raised during async execution the async exception is automatically 
            rethrown at the end of the async work.</remarks>
            <value>The async error handler.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IWorkerConfiguration.WarningThreshold">
            <summary>
            Sets the warning threshold. If the async operation lasts more then the 
            given timeout the supplied handler is invoked.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.IInputOutputWorkerConfiguration`2.Before">
            <summary>
            Gets or sets the before execution handler.
            </summary>
            <value>The before execution handler.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IInputOutputWorkerConfiguration`2.After">
            <summary>
            Gets or sets the after execution handler.
            </summary>
            <value>The after execution handler.</value>
        </member>
        <member name="M:Topics.Radical.Threading.WorkerConfiguration`2.#ctor(Topics.Radical.Threading.WorkerArgs{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Threading.WorkerConfiguration`2"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Topics.Radical.Threading.IInputWorker`1">
            <summary>
            Defines a configurable async worker that has input arguments.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IInputWorker`1.Configure(System.Action{Topics.Radical.Threading.IInputWorkerConfiguration{`0}})">
            <summary>
            Configures the current worker.
            </summary>
            <param name="cfg">The configuration handler.</param>
            <returns>A configured worker ready to be executed.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputWorker`1.Execute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputWorker`1.OnExecute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputWorker`1.AndExpecting``1">
            <summary>
            Defines the expected result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>The current worker.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IInputWorker`1.AndExpecting``1(``0)">
            <summary>
            Defines the expected result type.
            </summary>
            <remarks>
            This overload is really useful to define result type 
            based on anonymous types.
            </remarks>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sample">The sample result type.</param>
            <returns>The current worker.</returns>
        </member>
        <member name="T:Topics.Radical.Threading.IConfiguredInputWorker`1">
            <summary>
            Defines a configured async worker that has input arguments.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredInputWorker`1.Execute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredInputWorker`1.OnExecute(System.Action{Topics.Radical.Threading.IAsyncArgs{`0}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="T:Topics.Radical.Threading.IInputWorkerConfiguration`1">
            <summary>
            Defines the configuration for a worker with input arguments.
            </summary>
            <typeparam name="T">The type of the input.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IInputWorkerConfiguration`1.Before">
            <summary>
            Gets or sets the before execution handler.
            </summary>
            <value>The before execution handler.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IInputWorkerConfiguration`1.After">
            <summary>
            Gets or sets the after execution handler.
            </summary>
            <value>The after execution handler.</value>
        </member>
        <member name="T:Topics.Radical.Threading.IWorker">
            <summary>
            Defines the basic contract for an async running work.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.IWorker.Cancel">
            <summary>
            Cancels any pending async task.
            </summary>
        </member>
        <member name="T:Topics.Radical.Threading.IOuputWorker`1">
            <summary>
            Defines an async worker with a result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IOuputWorker`1.Configure(System.Action{Topics.Radical.Threading.IOutputWorkerConfiguration{`0}})">
            <summary>
            Configures the current worker.
            </summary>
            <param name="cfg">The configuration handler.</param>
            <returns>A configured worker ready to be executed.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.IOuputWorker`1.Execute(System.Action{Topics.Radical.Threading.IOutputAsyncArgs{`0}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IOuputWorker`1.OnExecute(System.Action{Topics.Radical.Threading.IOutputAsyncArgs{`0}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="T:Topics.Radical.Threading.IConfiguredOuputWorker`1">
            <summary>
            Defines a configured async worker that has a result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredOuputWorker`1.Execute(System.Action{Topics.Radical.Threading.IOutputAsyncArgs{`0}})">
            <summary>
            Executes the specified async action.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IWorker"/> instance useful to track worker state.
            </returns>
        </member>
        <member name="M:Topics.Radical.Threading.IConfiguredOuputWorker`1.OnExecute(System.Action{Topics.Radical.Threading.IOutputAsyncArgs{`0}})">
            <summary>
            Stores the specified async action and return an <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> that can be run when required.
            </summary>
            <param name="asyncHandler">The async handler.</param>
            <returns>
            An <see cref="T:Topics.Radical.Threading.IExecutableWorker"/> instance that can be run when required and is useful to track worker state.
            </returns>
        </member>
        <member name="T:Topics.Radical.Threading.IOutputWorkerConfiguration`1">
            <summary>
            Defines the configuration for a worker with a result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Topics.Radical.Threading.IOutputWorkerConfiguration`1.Before">
            <summary>
            Gets or sets the before execution handler.
            </summary>
            <value>The before execution handler.</value>
        </member>
        <member name="P:Topics.Radical.Threading.IOutputWorkerConfiguration`1.After">
            <summary>
            Gets or sets the after execution handler.
            </summary>
            <value>The after execution handler.</value>
        </member>
        <member name="T:Topics.Radical.Threading.WarningThreshold">
            <summary>
            Defines the warning threshold behavior.
            </summary>
        </member>
        <member name="P:Topics.Radical.Threading.WarningThreshold.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="P:Topics.Radical.Threading.WarningThreshold.Handler">
            <summary>
            Gets or sets the handler to invoke whenever
            the warning threshold is reached.
            </summary>
            <value>The warning threshold reached handler.</value>
        </member>
        <member name="T:Topics.Radical.Threading.WorkCompletedEventArgs">
            <summary>
            Defines the arguments of the WorkCompleted event exposed by an IWorker.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.WorkCompletedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Threading.WorkCompletedEventArgs"/> class.
            </summary>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
        </member>
        <member name="P:Topics.Radical.Threading.WorkCompletedEventArgs.Cancelled">
            <summary>
            Gets or sets a value indicating whether the async work has been cancelled by the user.
            </summary>
            <value><c>true</c> if the async work has been cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Threading.Worker`2.AsyncWaitHandle">
            <summary>
            Gets the async wait handle that the calling thread can use to wait for the async work completition.
            </summary>
            <value>The async wait handle.</value>
        </member>
        <member name="T:Topics.Radical.Threading.NullDispatcher">
            <summary>
            Implements the <seealso cref="T:Topics.Radical.ComponentModel.IDispatcher"/> interface
            without doing nothing, the NullDispatcher is usefull in
            scenarios, where the MessageBroker is required, but where
            there are no cross threading issues.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.NullDispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Safely invokes the specified delegate.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="args">The delegate arguments, or null if no arguments shuold passed to the delegate.</param>
        </member>
        <member name="M:Topics.Radical.Threading.NullDispatcher.Dispatch(System.Action)">
            <summary>
            Safely dispatches the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Topics.Radical.Threading.NullDispatcher.Dispatch``1(``0,System.Action{``0})">
            <summary>
            Safely dispatches the given argument to the supplied action.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="arg">The argument.</param>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.Threading.NullDispatcher.Dispatch``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Safely dispatches the given arguments to the supplied action.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="M:Topics.Radical.Threading.NullDispatcher.Dispatch``1(System.Func{``0})">
            <summary>
            Safely dispatches the specified Func delegate.
            </summary>
            <typeparam name="TResult">The type of the Func result.</typeparam>
            <param name="func">The Func to dispatch.</param>
            <returns>The result of Func invocation.</returns>
        </member>
        <member name="P:Topics.Radical.Threading.NullDispatcher.IsSafe">
            <summary>
            Gets a value indicating whether the caller can safely call a target method without using this dispatcher.
            </summary>
            <value><c>true</c> if the call is safe; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Topics.Radical.ComponentModel.ByteArrayTimestamp">
            <summary>
            A concrete implementazion of a timestamp type whose underlying type
            is an array of <c>Byte</c>.
            </summary>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Timestamp`1">
            <summary>
            A base class defining a generic strongly typed Timestamp type.
            </summary>
            <typeparam name="T">The type of the value holded by this Timestamp.</typeparam>
        </member>
        <member name="T:Topics.Radical.ComponentModel.Timestamp">
            <summary>
            A base class defining a Timestamp type.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.Timestamp"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.op_Equality(Topics.Radical.ComponentModel.Timestamp,Topics.Radical.ComponentModel.Timestamp)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="leftValue">The left side timestamp.</param>
            <param name="rightValue">The right side timestamp.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.Equals(Topics.Radical.ComponentModel.Timestamp)">
            <summary>
            Determines whether the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>.
            </summary>
            <param name="obj">The <see cref="T:Timestamp"/> to compare with the current <see cref="T:Timestamp"/>.</param>
            <returns>
            true if the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.op_Inequality(Topics.Radical.ComponentModel.Timestamp,Topics.Radical.ComponentModel.Timestamp)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="leftValue">The left side timestamp.</param>
            <param name="rightValue">The right side timestamp.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.Timestamp`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp`1.op_Implicit(`0)~Topics.Radical.ComponentModel.Timestamp{`0}">
            <summary>
            Performs an implicit conversion from the underlying type to <see cref="T:Topics.Radical.ComponentModel.Timestamp`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp`1.op_Implicit(Topics.Radical.ComponentModel.Timestamp{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Topics.Radical.ComponentModel.Timestamp`1"/> 
            to the underlying type.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp`1.Equals(Topics.Radical.ComponentModel.Timestamp)">
            <summary>
            Determines whether the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>.
            </summary>
            <param name="obj">The <see cref="T:Timestamp"/> to compare with the current <see cref="T:Timestamp"/>.</param>
            <returns>
            true if the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.Timestamp`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns> A hash code for the current System.Object.</returns>
        </member>
        <member name="P:Topics.Radical.ComponentModel.Timestamp`1.Value">
            <summary>
            Gets the underlying value holded by this instance.
            </summary>
            <value>The value holded by this instance.</value>
        </member>
        <member name="F:Topics.Radical.ComponentModel.ByteArrayTimestamp.Empty">
            <summary>
            An empty <c>ByteArrayTimestamp</c> instance, exposed as a singleton.
            </summary>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ByteArrayTimestamp.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.ComponentModel.ByteArrayTimestamp"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ByteArrayTimestamp.Equals(Topics.Radical.ComponentModel.Timestamp)">
            <summary>
            Determines whether the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>.
            </summary>
            <param name="obj">The <see cref="T:Timestamp"/> to compare with the current <see cref="T:Timestamp"/>.</param>
            <returns>
            true if the specified <see cref="T:Timestamp"/> is equal to the current <see cref="T:Timestamp"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ByteArrayTimestamp.op_Implicit(System.Byte[])~Topics.Radical.ComponentModel.ByteArrayTimestamp">
            <summary>
            Performs an implicit conversion from <c>Byte[]</c> to <see cref="T:Topics.Radical.ComponentModel.ByteArrayTimestamp"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Topics.Radical.ComponentModel.ByteArrayTimestamp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Validation.ArrayEnsureExtension">
            <summary>
            Extends the generic Ensure class to add behaviors when the inspected object
            is an <c>Array</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ArrayEnsureExtension.ContainsIndex``1(Topics.Radical.Validation.IEnsure{``0[]},System.Int32)">
            <summary>
            Determines whether the specified index is inside the bounds of
            the inspected array.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="validator">The current, extended, Ensure instance.</param>
            <param name="index">The index to validate.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="T:Topics.Radical.Validation.Or">
            <summary>
            Determines the equality behavior when comparing values.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Or.Equal">
            <summary>
            Values can be equal.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Or.NotEqual">
            <summary>
            Values cannot be equal.
            </summary>
        </member>
        <member name="T:Topics.Radical.Validation.Boundary">
            <summary>
            Determines the boundary evaluation behavior.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.IncludeLower">
            <summary>
            Lower bound is included.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.ExcludeLower">
            <summary>
            Lower bound is excluded.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.IncludeHigher">
            <summary>
            Higher bound is included.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.ExcludeHigher">
            <summary>
            Higher bound is excluded.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.ExcludeBounds">
            <summary>
            Bounds are excluded.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.Boundary.IncludeBounds">
            <summary>
            Bounds are included.
            </summary>
        </member>
        <member name="T:Topics.Radical.Validation.ComparableEnsureExtension">
            <summary>
            Extends the generic Ensure class to add behaviors when the inspected object
            is an <c>IComparable(of T)</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsGreaterThen``1(Topics.Radical.Validation.IEnsure{``0},``0)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c> 
            and can be used to ensure that the inspected value is greater then an expected value.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="expected">The expected value to compare to.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is smaller then the expected value.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsGreaterThen``1(Topics.Radical.Validation.IEnsure{``0},``0,Topics.Radical.Validation.Or)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c>
            and can be used to ensure that the inspected value is greater then or equale to
            an expected value.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="expected">The expected value to compare to.</param>
            <param name="boundaryBehavior">The boundary behavior in order to 
            be able to specify an OrEqual behavior.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is smaler then the expected value.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsSmallerThen``1(Topics.Radical.Validation.IEnsure{``0},``0)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c>
            and can be used to ensure that the inspected value is smaller then an expected value.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="expected">The expected value to compare to.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is greater then the expected value.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsSmallerThen``1(Topics.Radical.Validation.IEnsure{``0},``0,Topics.Radical.Validation.Or)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c>
            and can be used to ensure that the inspected value is smaller then an expected value.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="expected">The expected value to compare to.</param>
            <param name="boundaryBehavior">The boundary behavior in order to
            be able to specify an OrEqual behavior.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is greater then the expected value.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsWithin``1(Topics.Radical.Validation.IEnsure{``0},``0,``0)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c>
            and can be used to ensure that the inspected value is within a given range.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="lowerBoundary">The lower boundary.</param>
            <param name="higherBoundary">The higher boundary.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is outside the expected range.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.ComparableEnsureExtension.IsWithin``1(Topics.Radical.Validation.IEnsure{``0},``0,``0,Topics.Radical.Validation.Boundary)">
            <summary>
            Extends the Ensure class when the inspected object is a generic <c>IComparabe</c>
            and can be used to ensure that the inspected value is within a given range.
            </summary>
            <typeparam name="T">The inspected value type.</typeparam>
            <param name="validator">The Ensure class to extend.</param>
            <param name="lowerBoundary">The lower boundary.</param>
            <param name="higherBoundary">The higher boundary.</param>
            <param name="boundaryBehavior">The boundary behavior in order to
            be able to specify an OrEqual behavior.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is outside the expected range.</exception>
        </member>
        <member name="T:Topics.Radical.Validation.Ensure`1">
            <summary>
            Enusre is a simple, fluent based, engine usefull to validate
            methods and constructors parameters.
            </summary>
            <typeparam name="T">The type of the parameter to validate.</typeparam>
        </member>
        <member name="T:Topics.Radical.Validation.IConfigurableEnsure`1">
            <summary>
            Defines an ensure ready to be configured.
            </summary>
            <typeparam name="T">The type this ensure is attached to.</typeparam>
        </member>
        <member name="T:Topics.Radical.Validation.IEnsure`1">
            <summary>
            Defines an ensure configured and attached on a type.
            </summary>
            <typeparam name="T">The type this ensure is attached to.</typeparam>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Else(System.Action{`0,System.String})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>false</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Else(System.Action{`0})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>false</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.GetFullErrorMessage(System.String)">
            <summary>
            Gets the full error message combining the user custom message, if any, 
            with the supplied validator message and with source stack information.
            </summary>
            <param name="validatorSpecificMessage">The validator specific message.</param>
            <returns>
            The error message.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.GetFullErrorMessage">
            <summary>
            Gets the full error message including source stack information.
            </summary>
            <returns>
            The error message.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.GetValue">
            <summary>
            Gets the currently inspected object value.
            </summary>
            <returns>The currently inspected object value.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.GetValue``1">
            <summary>
            Gets the currently inspected object value castaed to specified type.
            </summary>
            <typeparam name="K">The type to cast the inspected object to, K must inherith from T.</typeparam>
            <returns>The currently inspected object value.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.If(System.Predicate{`0})">
            <summary>
            Execute the given predicate and saves the result for later usage.
            </summary>
            <param name="predicate">The predicate to evaluate in order to establish if the operation resault is <c>true</c> or <c>false</c>.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Is(`0)">
            <summary>
            Ensure that the supplied object is equal to the currently inspected object.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the object equality fails.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.IsFalse(System.Predicate{`0})">
            <summary>
            Ensure that the supplied predicate returns false.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the predicate result is true.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.IsNot(`0)">
            <summary>
            Ensure that the supplied object is not equal to the currently inspected object.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the object equality does not fail.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.IsTrue(System.Predicate{`0})">
            <summary>
            Ensure that the supplied predicate returns true.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the predicate result is false.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Then(System.Action{`0,System.String})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>true</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Then(System.Action{`0})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>true</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.WithMessage(System.String)">
            <summary>
            Specifies the custom user message to be used when raising exceptions.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>This ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.WithMessage(System.String,System.Object[])">
            <summary>
            Specifies the custom user message to be used when raising exceptions.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="formatArgs">The format arguments.</param>
            <returns>
            This ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.ThenThrow(System.Func{Topics.Radical.Validation.IEnsure{`0},System.Exception})">
            <summary>
            Throws the exception returned by the supplied exception
            builder only if the previous "If" check returns true.
            </summary>
            <param name="builder">The exception builder.</param>
            <returns>
            This ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.Throw(System.Exception)">
            <summary>
            Throws the specified exception.
            </summary>
            <param name="error">The exception to throw.</param>
        </member>
        <member name="M:Topics.Radical.Validation.IEnsure`1.WithPreview(System.Action{Topics.Radical.Validation.IEnsure{`0},System.Exception})">
            <summary>
            Allows the interception of ensure failures before the failure in order to
            log the error that will be raised.
            </summary>
            <param name="validationFailurePreview">The validation failure preview handler.</param>
            <returns>
            This ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="P:Topics.Radical.Validation.IEnsure`1.Name">
            <summary>
            Gets the name of the parameter to validate.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:Topics.Radical.Validation.IEnsure`1.UserErrorMessage">
            <summary>
            Gets the user custom error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Topics.Radical.Validation.IEnsure`1.Value">
            <summary>
            Gets the value of the validated parameter.
            </summary>
            <value>The value of the parameter.</value>
        </member>
        <member name="M:Topics.Radical.Validation.IConfigurableEnsure`1.Named(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Identifies the name of the parameter that will be validated.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.IConfigurableEnsure`1.Named(System.String)">
            <summary>
            Identifies the name of the parameter that will be validated.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.#ctor(`0,Topics.Radical.Validation.Ensure.SourceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.Ensure`1"/> class.
            </summary>
            <param name="obj">The value of the parameter to validate.</param>
            <param name="si">The source info.</param>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.GetValue">
            <summary>
            Gets the currently inspected object value.
            </summary>
            <returns>The currently inspected object value.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.GetValue``1">
            <summary>
            Gets the currently inspected object value castaed to specified type.
            </summary>
            <typeparam name="K">The type to cast the inspected object to, K must inherith from T.</typeparam>
            <returns>The currently inspected object value.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Named(System.String)">
            <summary>
            Identifies the name of the parameter that will be validated.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Named(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Identifies the name of the parameter that will be validated.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.WithMessage(System.String)">
            <summary>
            Specifies the custom user message to be used when raising exceptions.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>This ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.WithMessage(System.String,System.Object[])">
            <summary>
            Specifies the custom user message to be used when raising exceptions.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="formatArgs">The format arguments.</param>
            <returns>
            This ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.GetFullErrorMessage(System.String)">
            <summary>
            Gets the full error message.
            </summary>
            <param name="validatorSpecificMessage">The validator specific message.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.GetFullErrorMessage">
            <summary>
            Gets the full error message.
            </summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.If(System.Predicate{`0})">
            <summary>
            Execute the given predicate and saves the result for later usage.
            </summary>
            <param name="predicate">The predicate to evaluate in order to establish if the operation resault is <c>true</c> or <c>false</c>.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Then(System.Action{`0})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>true</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Else(System.Action{`0})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>false</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Then(System.Action{`0,System.String})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>true</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Else(System.Action{`0,System.String})">
            <summary>
            Executes the specified action only if the <c>If</c> operation has been evaluated to <c>false</c>.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.IsTrue(System.Predicate{`0})">
            <summary>
            Ensure that the supplied predicate returns true.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the predicate result is false.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.IsFalse(System.Predicate{`0})">
            <summary>
            Ensure that the supplied predicate returns false.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the predicate result is true.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Is(`0)">
            <summary>
            Ensure that the supplied object is equal to the currently inspected object.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the object equality fails.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.IsNot(`0)">
            <summary>
            Ensure that the supplied object is not equal to the currently inspected object.
            </summary>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentException">An ArgumentException is raised if the object equality does not fail.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.ThenThrow(System.Func{Topics.Radical.Validation.IEnsure{`0},System.Exception})">
            <summary>
            Throws the specified error if the previous If check has returned true.
            </summary>
            <param name="builder">The exception builder.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.WithPreview(System.Action{Topics.Radical.Validation.IEnsure{`0},System.Exception})">
            <summary>
            Allows the user to interceptthe ensure failure before the exception is raised.
            </summary>
            <param name="validationFailurePreview">The validation failure preview handler.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure`1.Throw(System.Exception)">
            <summary>
            Throws the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure`1.Name">
            <summary>
            Gets or sets the name of the parameter to validate.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure`1.UserErrorMessage">
            <summary>
            Gets the user custom error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure`1.Value">
            <summary>
            Gets the value of the validated parameter.
            </summary>
            <value>The value of the parameter.</value>
        </member>
        <member name="T:Topics.Radical.Validation.Ensure">
            <summary>
            Enusre is a simple, fluent based, engine usefull to validate
            methods and constructors parameters.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure.That``1(``0)">
            <summary>
            Initialize a new instance of the generic Ensure class using the supplied
            value as the value to insepct.
            </summary>
            <typeparam name="T">The type of the inepcted object value.</typeparam>
            <param name="obj">The object value to inspect.</param>
            <returns>The Ensure instance for fluent interface usage.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.Ensure.SourceInfo.#ctor(System.String,System.String,System.Reflection.MemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.Ensure.SourceInfo"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="className">Name of the class.</param>
            <param name="sourceType">Type of the source.</param>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure.SourceInfo.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure.SourceInfo.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Topics.Radical.Validation.Ensure.SourceInfo.SourceType">
            <summary>
            Gets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="T:Topics.Radical.Validation.EnsureExtensions">
            <summary>
            Defines some extensions facilities for the <see cref="T:Topics.Radical.Validation.Ensure"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.EnsureExtensions.IsNotNull``1(Topics.Radical.Validation.IEnsure{``0})">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the currently 
            inspected object is a null reference.
            </summary>
            <typeparam name="T">The type of the inspected object.</typeparam>
            <param name="validator">The current validator.</param>
            <returns>The current validator for fluent interface usage.</returns>
        </member>
        <member name="T:Topics.Radical.Validation.EnumEnsureExtensions">
            <summary>
            Extends the generic Ensure class to add behaviors when the inspected object
            is an <c>Enum</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.EnumEnsureExtensions.IsDefined``1(Topics.Radical.Validation.IEnsure{``0})">
            <summary>
            Determines whether the specified enumeration value is defined.
            </summary>
            <typeparam name="T">THe type of the enumeration to inspect.</typeparam>
            <param name="validator">The current validator.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.NotSupportedException">A <c>NotSupportedException</c> is raised if the supplied type T is not an enum type.</exception>
            <exception cref="T:Topics.Radical.EnumValueOutOfRangeException">An <c>EnumValueOutOfRangeException</c>
            is raised if the supplied enum value is not defined.</exception>
        </member>
        <member name="T:Topics.Radical.Validation.GuidEnsureExtension">
            <summary>
            Extends the generic Ensure class to add behaviors when the inspected object
            is a <c>Guid</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.GuidEnsureExtension.IsNotEmpty(Topics.Radical.Validation.IEnsure{System.Guid})">
            <summary>
            Extends the Ensure class when the inspected object is a <c>Guid</c> and can
            be used to ensure that the inspected Guid is not an empty Guid.
            </summary>
            <param name="validator">The Ensure class to extend.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is an empty Guid.</exception>
        </member>
        <member name="T:Topics.Radical.Validation.StringEnsureExtension">
            <summary>
            Extends the generic Ensure class to add behaviors when the inspected object
            is a <c>String</c>.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.StringEnsureExtension.IsNotEmpty(Topics.Radical.Validation.IEnsure{System.String})">
            <summary>
            Extends the Ensure class when the inspected object is a <c>String</c> and can
            be used to ensure that the inspected string is not an empty string.
            </summary>
            <param name="validator">The Ensure class to extend.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is an empty string.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.StringEnsureExtension.IsNotNullNorEmpty(Topics.Radical.Validation.IEnsure{System.String})">
            <summary>
            Extends the Ensure class when the inspected object is a <c>String</c> and can
            be used to ensure that the inspected string is not an empty string and not a null string.
            </summary>
            <param name="validator">The Ensure class to extend.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An <c>ArgumentOutOfRangeException</c>
            is raised if the current inspected object is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">An <c>ArgumentNullException</c>
            is raised if the current inspected object is a null string.</exception>
        </member>
        <member name="M:Topics.Radical.Validation.StringEnsureExtension.Matches(Topics.Radical.Validation.IEnsure{System.String},System.String)">
            <summary>
            Extends the Ensure class when the inspected object is a <c>String</c> and can
            be used to ensure that the inspected string matches the given regular expression.
            </summary>
            <param name="validator">The Ensure class to extend.</param>
            <param name="regExPattern">The regular expression pattern.</param>
            <returns>
            The Ensure instance for fluent interface usage.
            </returns>
            <exception cref="T:System.FormatException">A <c>FormatException</c>
            is raised if the current inspected object does not match the given regular expression.
            </exception>
        </member>
        <member name="T:Topics.Radical.Validation.TypeEnsureExtension">
            <summary>
            Defines some extensions facilities for the <see cref="T:Topics.Radical.Validation.Ensure"/> class
            when used to validate system types.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.TypeEnsureExtension.Is``1(Topics.Radical.Validation.IEnsure{System.Type})">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the currently 
            inspected <see cref="T:System.Type"/> does not match the specified Type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to compare.</typeparam>
            <param name="validator">The current validator.</param>
            <returns>The current validator for fluent interface usage.</returns>
        </member>
        <member name="T:Topics.Radical.Validation.ValidationContext`1">
            <summary>
            Defines the current validation context.
            </summary>
            <typeparam name="T">The type of the validated object.</typeparam>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationContext`1.#ctor(`0,Topics.Radical.ComponentModel.Validation.IValidator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationContext`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationContext`1.#ctor(`0,Topics.Radical.ComponentModel.Validation.IValidator{`0},Topics.Radical.Validation.ValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationContext`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="validator">The validator.</param>
            <param name="results">The results.</param>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationContext`1.Entity">
            <summary>
            Gets the entity under validation.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationContext`1.RuleSet">
            <summary>
            Gets or sets the validation rule set if specified.
            </summary>
            <value>The rule set.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationContext`1.PropertyName">
            <summary>
            Gets or sets the name of the validated property if specified.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationContext`1.Validator">
            <summary>
            Gets the current validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationContext`1.Results">
            <summary>
            Gets the current validation results.
            </summary>
            <value>The validation results.</value>
        </member>
        <member name="T:Topics.Radical.Validation.ValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationError.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String[])">
            <summary>
            Creates a new <see cref="T:Topics.Radical.Validation.ValidationError"/> with the specified key and problems.
            </summary>
            <typeparam name="T">The type of the validated property.</typeparam>
            <param name="key">The key that represents the name of the validated property.</param>
            <param name="detectedProblems">The detected problems.</param>
            <returns>The newly created <see cref="T:Topics.Radical.Validation.ValidationError"/>.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationError.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationError"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="detectedProblems">The detected problems.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationError.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationError"/> class.
            </summary>
            <param name="key">The key, tipically the invalid property name.</param>
            <param name="detectedProblems">The detected problems.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationError.AddProblems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the given list of problems to the currently detected problems.
            </summary>
            <param name="problems">The problems to add.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationError.Key">
            <summary>
            Gets the error key.
            </summary>
            <value>The error key.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationError.DetectedProblems">
            <summary>
            Gets the detected problems.
            </summary>
            <value>The detected problems.</value>
        </member>
        <member name="T:Topics.Radical.Validation.ValidationErrors">
            <summary>
            Helper class to expose empty validation errors.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.ValidationErrors.Empty">
            <summary>
            An empty list of validation errors.
            </summary>
        </member>
        <member name="T:Topics.Radical.Validation.ValidationResults">
            <summary>
            Defines the result(s) of a validation process.
            </summary>
        </member>
        <member name="F:Topics.Radical.Validation.ValidationResults.Empty">
            <summary>
            Helper instance to expose an empty validation result.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationResults.#ctor(System.Collections.Generic.IEnumerable{Topics.Radical.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> class.
            </summary>
            <param name="errors">The initial errors.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationResults.AddError``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String[])">
            <summary>
            Adds a new error for the given key with the supplied detected problems.
            </summary>
            <typeparam name="T">The type of the validated property.</typeparam>
            <param name="key">The key the represents the name of the validated property.</param>
            <param name="detectedProblems">The detected problems.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidationResults.AddError(Topics.Radical.Validation.ValidationError)">
            <summary>
            Adds the given error to the validation errors list.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationResults.IsValid">
            <summary>
            Gets a value indicating whether validation succedeed or not.
            </summary>
            <value><c>true</c> if the validation succedeed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Validation.ValidationResults.Errors">
            <summary>
            Gets the list of validation errors.
            </summary>
            <value>The validation errors.</value>
        </member>
        <member name="T:Topics.Radical.Validation.ValidatorBase`1">
            <summary>
            Defines a base implementation of the generic IValidator interface.
            </summary>
            <typeparam name="T">The type of the validated object.</typeparam>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Validation.ValidatorBase`1"/> class.
            </summary>
            <param name="ruleSet">The rule set.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.IsValid(`0)">
            <summary>
            Determines whether the specified entity is valid.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.OnValidate(Topics.Radical.Validation.ValidationContext{`0})">
            <summary>
            Executes the validation process.
            </summary>
            <param name="context">The validation context.</param>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.Validate(`0)">
            <summary>
            Validates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.Validate(`0,System.String)">
            <summary>
            Validates the specified property of the given entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns>
            An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.Validate``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Validates the specified property of the given entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="entity">The entity.</param>
            <param name="property">The property to validate.</param>
            <returns>
            An instance of the <see cref="T:Topics.Radical.Validation.ValidationResults"/> with the results of the validation process.
            </returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.AddRule(System.Action{Topics.Radical.Validation.ValidationContext{`0}})">
            <summary>
            Adds the given rule to the list of the validation rules.
            </summary>
            <param name="rule">The rule to add.</param>
            <returns>The current validator instance.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBase`1.AddRule(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Topics.Radical.Validation.ValidationContext{`0},Topics.Radical.ComponentModel.Validation.RuleEvaluation},System.String)">
            <summary>
            Adds the rule.
            </summary>
            <param name="propertyIdentifier">The property identifier.</param>
            <param name="rule">The rule.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.Validation.ValidatorBase`1.RuleSet">
            <summary>
            Gets the rule set.
            </summary>
        </member>
        <member name="T:Topics.Radical.Validation.ValidatorBaseFactory">
            <summary>
            A factory capable of creationg base validators.
            </summary>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBaseFactory.CreateValidator``1">
            <summary>
            Creates a validator for the given entity type.
            </summary>
            <typeparam name="T">The entity type to validate.</typeparam>
            <returns>An instance of the requested validator.</returns>
        </member>
        <member name="M:Topics.Radical.Validation.ValidatorBaseFactory.CreateValidator``1(System.String)">
            <summary>
            Creates a validator, that uses the given rule set,
            for the given entity.
            </summary>
            <typeparam name="T">The entity type to validate.</typeparam>
            <param name="ruleSet">The rule set to pass to the
            newly created validator.</param>
            <returns>An instance of the requested validator.</returns>
        </member>
        <member name="T:Topics.Radical.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still allowing
            that object to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T">The type of the object that is referenced.</typeparam>
        </member>
        <member name="M:Topics.Radical.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the WeakReference{T} class, referencing
            the specified object.
            </summary>
            <param name="target">The object to reference.</param>
        </member>
        <member name="M:Topics.Radical.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the WeakReference{T} class, referencing
            the specified object and using the specified resurrection tracking.
            </summary>
            <param name="target">An object to track.</param>
            <param name="trackResurrection">Indicates when to stop tracking the object. 
            If true, the object is tracked
            after finalization; if false, the object is only tracked 
            until finalization.</param>
        </member>
        <member name="M:Topics.Radical.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.WeakReference`1"/> class.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference"/> object.</param>
            <param name="context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> is null.
            </exception>
        </member>
        <member name="P:Topics.Radical.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the 
            current WeakReference{T} object.
            </summary>
        </member>
        <member name="T:Topics.Radical.Win32.NativeMethods">
            <summary>
            A bridge to frequently used
            OS APIs
            </summary>
        </member>
        <member name="T:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="M:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="P:Topics.Radical.Threading.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
    </members>
</doc>
